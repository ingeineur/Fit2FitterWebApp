{"version":3,"sources":["../node_modules/react-semantic-ui-datepickers/dist/locales sync /^/.*/.json$","store/WeatherForecasts.ts","store/Login.ts","store/index.ts","store/Counter.ts","components/NavMenu.tsx","components/Layout.tsx","components/Home.tsx","components/Counter.tsx","components/FetchData.tsx","components/Dashboard.tsx","components/ActivityTable.tsx","components/ActivityHeader.tsx","components/Activities.tsx","components/MacroTable.tsx","components/MacroNew.tsx","components/MacroHeader.tsx","components/MacroModal.tsx","components/Meals.tsx","components/Macro.tsx","components/MeasurementsTable.tsx","components/MeasurementsHeader.tsx","components/Measurements.tsx","components/PersonalTable.tsx","components/PersonalHeader.tsx","components/Personal.tsx","components/EBook.tsx","components/Admin.tsx","components/Master.tsx","registerServiceWorker.ts","index.tsx","store/configureStore.ts","App.tsx"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","actionCreators","requestWeatherForecasts","startDateIndex","dispatch","getState","appState","weatherForecasts","fetch","then","response","json","data","type","forecasts","unloadedState","isLoading","requestLogins","username","password","logins","updateLogins","requestLogout","getLogin","reducers","counter","state","incomingAction","undefined","count","action","reducer","NavMenu","isOpen","toggle","setState","Navbar","className","light","Container","NavbarBrand","tag","Link","to","Grid","Column","Image","src","size","style","fontStyle","fontFamily","fontSize","NavbarToggler","onClick","this","Collapse","navbar","NavItem","NavLink","React","props","children","Home","onSubmit","updateInput","event","target","value","updateInput2","handleItemClick","name","activeItem","getAdmin","Menu","fluid","vertical","icon","Item","Icon","color","getLoginCredentials","error","login","clearCredentials","length","centered","Row","columns","width","Form","Field","Input","placeholder","onChange","Button","primary","connect","LoginStore","Counter","console","log","basic","aria-live","increment","decrement","FetchData","ensureDataFetched","renderForecastsTable","renderPagination","parseInt","match","params","aria-labelledby","forecast","key","date","temperatureC","temperatureF","summary","prevStartDateIndex","nextStartDateIndex","WeatherForecastsStore","Dashboard","addActivity","activities","push","ActivityDesc","steps","calories","updated","setValuesFromDto","clients","clientDtos","forEach","client","firstName","age","city","getFlag","country","Flag","getRows","sorted","sort","a","b","item","index","List","avatar","Content","Header","as","Description","handleDateChange","field","newDate","Date","Math","abs","prevDate","getTime","selectedDate","activityDtos","dateChanged","apiUpdate","setActivities","activity","findIndex","x","clientId","getActivities","toISOString","catch","resetActivities","pop","guides","totalActivities","setHours","verticalAlign","floated","textAlign","Label","circular","showToday","Segment","inverted","attached","ActivityTable","getColour","total","handleActivityChange","handleCaloriesChange","isNaN","handleStepsChange","handleCheckChange","stretched","Checkbox","toString","checked","check","list","dirty","update","updateActivities","reduce","ActivityHeader","totalCalories","totalSteps","backgroundColor","Activities","removeActivities","arr","filter","obj","input","savingStatus","description","deleteActivities","fetchStr","method","headers","saveActivities","body","JSON","stringify","Id","Calories","Steps","Updated","Created","ClientId","onSave","setTimeout","bind","divLabelStyle","secondary","MacroTable","handleMealDescChange","meals","handleMacroChange","test","mealDesc","macro","macroType","mealType","updateMeals","MacroNew","veg","fat","protein","carb","getMacroType","getMeals","meal","fruits","updateParentCarb","text","active","MacroHeader","totalCarb","parseFloat","totalProtein","totalFat","totalVeg","toFixed","MacroModal","getMealTypeString","getCarbs","getProtein","getFat","getSnack","getCarbHeader","getProteinHeader","getFatHeader","getVegHeader","Message","header","consumedCarb","consumedProtein","consumedFat","labels","series","Meals","mealTypeDict","getMealType","getActivityLevel","activityLevel","setMacroGuides","macrosPlanDtos","macrosPlan","bmr","weight","height","carbPercent","proteinPercent","fatPercent","setMeals","mealDtos","totalMeals","macroValue","saveCarb","MealType","MacroType","MealDesc","MacroValue","saveProtein","saveFat","saveFruits","deleteMeals","i","resetMeals","handleOpen","open","openReview","tabular","compact","Modal","onClose","onOpen","trigger","toLocaleDateString","scrolling","Actions","Macro","updateCarb","addCarb","minusCarb","addProtein","minusProtein","addFat","minusFat","addVeg","minusVeg","updateVeg","updateProtein","updateFat","updateMeal","pointing","MeasurementsTable","updateNeck","neck","updateUpperArm","upperArm","updateWaist","waist","updateHips","hips","updateThigh","thigh","updateChest","chest","updateWeight","onFocusNeck","selected","onFocusWaist","onFocusHips","onFocusThigh","onFocusChest","onFocusUpperArm","onFocusWeight","getBodyParts","bodyfat","measurements","updateMeasurements","onFocus","MeasurementsHeader","getBodyFatIndicator","bodyFat","level","divLabelStyle1","bodyFatPercent","divided","targetWeight","Measurements","getComponent","measurementDtos","macrosPlans","plan","measurement","onCancel","created","macroGuides","activityTypes","mealPlan","PersonalTable","updateName","updateAge","updateHeight","updateTargetWeight","getActivityLevelText","setActivityLevel","getMacroTypeText","setMacroType","getMinMaxMacroPortions","isPortionsExceeded","setCarbPercent","val","setProteinPercent","setFatPercent","macroPortionsDict","personal","updatePersonal","Dropdown","selection","options","variant","tooltipLabel","currentValue","tooltip","min","max","PersonalHeader","totalMacros","Personal","lastName","address","EBook","getPdf","divPdf","Admin","updateInput3","password1","lastLogin","Master","handleMealsClick","setClient","clientList","find","cname","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","baseUrl","document","getElementsByTagName","getAttribute","history","createBrowserHistory","basename","store","initialState","middleware","thunk","routerMiddleware","rootReducer","combineReducers","router","connectRouter","enhancers","windowIfDefined","__REDUX_DEVTOOLS_EXTENSION__","createStore","compose","applyMiddleware","configureStore","ReactDOM","Layout","exact","path","component","ActivivtyHeader","ActivivtyTable","getElementById","URL","process","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.006790ee.chunk.js","sourcesContent":["var map = {\n\t\"./bg-BG.json\": 369,\n\t\"./ca-ES.json\": 370,\n\t\"./cs-CZ.json\": 371,\n\t\"./de-DE.json\": 372,\n\t\"./en-US.json\": 194,\n\t\"./es-ES.json\": 373,\n\t\"./et-EE.json\": 374,\n\t\"./fi-FI.json\": 375,\n\t\"./fr-FR.json\": 376,\n\t\"./he-IL.json\": 377,\n\t\"./it-IT.json\": 378,\n\t\"./ja-JP.json\": 379,\n\t\"./nb-NO.json\": 380,\n\t\"./pl-PL.json\": 381,\n\t\"./pt-BR.json\": 382,\n\t\"./ru-RU.json\": 383,\n\t\"./sv-SE.json\": 384,\n\t\"./tr-TR.json\": 385,\n\t\"./zh-CN.json\": 386\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 368;","import { Action, Reducer } from 'redux';\r\nimport { AppThunkAction } from './';\r\n\r\n// -----------------\r\n// STATE - This defines the type of data maintained in the Redux store.\r\n\r\nexport interface WeatherForecastsState {\r\n    isLoading: boolean;\r\n    startDateIndex?: number;\r\n    forecasts: WeatherForecast[];\r\n}\r\n\r\nexport interface WeatherForecast {\r\n    date: string;\r\n    temperatureC: number;\r\n    temperatureF: number;\r\n    summary: string;\r\n}\r\n\r\n// -----------------\r\n// ACTIONS - These are serializable (hence replayable) descriptions of state transitions.\r\n// They do not themselves have any side-effects; they just describe something that is going to happen.\r\n\r\ninterface RequestWeatherForecastsAction {\r\n    type: 'REQUEST_WEATHER_FORECASTS';\r\n    startDateIndex: number;\r\n}\r\n\r\ninterface ReceiveWeatherForecastsAction {\r\n    type: 'RECEIVE_WEATHER_FORECASTS';\r\n    startDateIndex: number;\r\n    forecasts: WeatherForecast[];\r\n}\r\n\r\n// Declare a 'discriminated union' type. This guarantees that all references to 'type' properties contain one of the\r\n// declared type strings (and not any other arbitrary string).\r\ntype KnownAction = RequestWeatherForecastsAction | ReceiveWeatherForecastsAction;\r\n\r\n// ----------------\r\n// ACTION CREATORS - These are functions exposed to UI components that will trigger a state transition.\r\n// They don't directly mutate state, but they can have external side-effects (such as loading data).\r\n\r\nexport const actionCreators = {\r\n    requestWeatherForecasts: (startDateIndex: number): AppThunkAction<KnownAction> => (dispatch, getState) => {\r\n        // Only load data if it's something we don't already have (and are not already loading)\r\n        const appState = getState();\r\n        if (appState && appState.weatherForecasts && startDateIndex !== appState.weatherForecasts.startDateIndex) {\r\n            fetch(`weatherforecast`)\r\n                .then(response => response.json() as Promise<WeatherForecast[]>)\r\n                .then(data => {\r\n                    dispatch({ type: 'RECEIVE_WEATHER_FORECASTS', startDateIndex: startDateIndex, forecasts: data });\r\n                });\r\n\r\n            dispatch({ type: 'REQUEST_WEATHER_FORECASTS', startDateIndex: startDateIndex });\r\n        }\r\n    }\r\n};\r\n\r\n// ----------------\r\n// REDUCER - For a given state and action, returns the new state. To support time travel, this must not mutate the old state.\r\n\r\nconst unloadedState: WeatherForecastsState = { forecasts: [], isLoading: false };\r\n\r\nexport const reducer: Reducer<WeatherForecastsState> = (state: WeatherForecastsState | undefined, incomingAction: Action): WeatherForecastsState => {\r\n    if (state === undefined) {\r\n        return unloadedState;\r\n    }\r\n\r\n    const action = incomingAction as KnownAction;\r\n    switch (action.type) {\r\n        case 'REQUEST_WEATHER_FORECASTS':\r\n            return {\r\n                startDateIndex: action.startDateIndex,\r\n                forecasts: state.forecasts,\r\n                isLoading: true\r\n            };\r\n        case 'RECEIVE_WEATHER_FORECASTS':\r\n            // Only accept the incoming data if it matches the most recent request. This ensures we correctly\r\n            // handle out-of-order responses.\r\n            if (action.startDateIndex === state.startDateIndex) {\r\n                return {\r\n                    startDateIndex: action.startDateIndex,\r\n                    forecasts: action.forecasts,\r\n                    isLoading: false\r\n                };\r\n            }\r\n            break;\r\n    }\r\n\r\n    return state;\r\n};\r\n","import { Action, Reducer, combineReducers } from 'redux';\r\nimport { AppThunkAction } from './';\r\n\r\n// -----------------\r\n// STATE - This defines the type of data maintained in the Redux store.\r\n\r\nexport interface LoginState {\r\n    isLoading: boolean;\r\n    username: string;\r\n    password: string;\r\n    logins: Login[];\r\n}\r\n\r\nexport interface Login {\r\n    id: number,\r\n    username: string;\r\n    password: string;\r\n    active: boolean;\r\n    lastLogin: string;\r\n    clientId: number;\r\n}\r\n\r\n// -----------------\r\n// ACTIONS - These are serializable (hence replayable) descriptions of state transitions.\r\n// They do not themselves have any side-effects; they just describe something that is going to happen.\r\n\r\ninterface RequestLoginsAction {\r\n    type: 'REQUEST_LOGINS';\r\n    username: string;\r\n    password: string;\r\n}\r\n\r\ninterface UpdateLoginsAction {\r\n    type: 'REQUEST_LOGINS';\r\n    username: string;\r\n    password: string;\r\n}\r\n\r\ninterface ReceiveLoginsAction {\r\n    type: 'RECEIVE_LOGINS';\r\n    username: string;   \r\n    password: string;\r\n    logins: Login[];\r\n}\r\n\r\ninterface ClearLoginsAction {\r\n    type: 'CLEAR_LOGINS';\r\n    username: string;\r\n    password: string;\r\n}\r\n\r\ninterface GetLoginsAction {\r\n    type: 'GET_LOGINS';\r\n}\r\n\r\n// Declare a 'discriminated union' type. This guarantees that all references to 'type' properties contain one of the\r\n// declared type strings (and not any other arbitrary string).\r\ntype KnownAction = RequestLoginsAction | UpdateLoginsAction | ReceiveLoginsAction | ClearLoginsAction | GetLoginsAction;\r\n\r\n// ----------------\r\n// ACTION CREATORS - These are functions exposed to UI components that will trigger a state transition.\r\n// They don't directly mutate state, but they can have external side-effects (such as loading data).\r\n\r\nexport const actionCreators = {\r\n    requestLogins: (username: string, password: string): AppThunkAction<KnownAction> => (dispatch, getState) =>\r\n    { \r\n        // Only load data if it's something we don't already have (and are not already loading)\r\n        const appState = getState();\r\n\r\n        if (appState && appState.logins && username !== appState.logins.username && password !== appState.logins.password)\r\n        {\r\n            fetch(\"api/login?username=\" + username + \"&password=\" + password)\r\n                .then(response => response.json() as Promise<Login[]>)\r\n                .then(data => {\r\n                    dispatch({ type: 'RECEIVE_LOGINS', username: username, password: password, logins: data });\r\n                });\r\n\r\n            dispatch({ type: 'REQUEST_LOGINS', username: username, password: password });\r\n        }\r\n    },\r\n    updateLogins: (username: string, password: string): AppThunkAction<KnownAction> => (dispatch, getState) => {\r\n        // Only load data if it's something we don't already have (and are not already loading)\r\n        const appState = getState();\r\n\r\n        if (appState && appState.logins && username !== appState.logins.username && password !== appState.logins.password) {\r\n            fetch(\"api/login?username=\" + username + \"&password=\" + password)\r\n                .then(response => response.json() as Promise<Login[]>)\r\n                .then(data => {\r\n                    dispatch({ type: 'RECEIVE_LOGINS', username: username, password: password, logins: data });\r\n                });\r\n        }\r\n    },\r\n    requestLogout: (username: string, password: string): AppThunkAction<KnownAction> => (dispatch) => { dispatch({ type: 'CLEAR_LOGINS', username: username, password: password }); },\r\n    getLogin: (): AppThunkAction<KnownAction> => (dispatch) => { dispatch({ type: 'GET_LOGINS'}); }\r\n};\r\n\r\n// ----------------\r\n// REDUCER - For a given state and action, returns the new state. To support time travel, this must not mutate the old state.\r\n\r\nconst unloadedState: LoginState = { isLoading: false, username: \"\", password: \"\", logins:[] };\r\n\r\nexport const reducer: Reducer<LoginState> = (state: LoginState | undefined, incomingAction: Action): LoginState => {\r\n    if (state === undefined) {\r\n        return unloadedState;\r\n    }\r\n\r\n    const action = incomingAction as KnownAction;\r\n    switch (action.type) {\r\n        case 'GET_LOGINS':\r\n            return {\r\n                username: state.username,\r\n                password: state.password,\r\n                logins: state.logins,\r\n                isLoading: false\r\n            };\r\n        case 'REQUEST_LOGINS':\r\n            return {\r\n                username: action.username,\r\n                password: action.password,\r\n                logins: state.logins,\r\n                isLoading: true\r\n            };\r\n        case 'RECEIVE_LOGINS':\r\n            // Only accept the incoming data if it matches the most recent request. This ensures we correctly\r\n            // handle out-of-order responses.\r\n            if (action.username === state.username && action.password === state.password) {\r\n                return {\r\n                    username: action.username,\r\n                    password: action.password,\r\n                    logins: action.logins,\r\n                    isLoading: false\r\n                };\r\n            }\r\n            break;\r\n    }\r\n\r\n    return state;\r\n};\r\n\r\nexport const rootReducer = (state: LoginState | undefined, incomingAction: Action) => {\r\n    const action = incomingAction as KnownAction;\r\n    if (action.type === 'CLEAR_LOGINS') {\r\n        state = undefined;\r\n    }\r\n\r\n    return reducer(state, action)\r\n}\r\n","import * as WeatherForecasts from './WeatherForecasts';\r\nimport * as Counter from './Counter';\r\nimport * as Logins from './Login';\r\n\r\n// The top-level state object\r\nexport interface ApplicationState {\r\n    counter: Counter.CounterState | undefined;\r\n    weatherForecasts: WeatherForecasts.WeatherForecastsState | undefined;\r\n    logins: Logins.LoginState | undefined;\r\n}\r\n\r\n// Whenever an action is dispatched, Redux will update each top-level application state property using\r\n// the reducer with the matching name. It's important that the names match exactly, and that the reducer\r\n// acts on the corresponding ApplicationState property type.\r\nexport const reducers = {\r\n    counter: Counter.reducer,\r\n    weatherForecasts: WeatherForecasts.reducer,\r\n    logins: Logins.rootReducer\r\n};\r\n\r\n// This type can be used as a hint on action creators so that its 'dispatch' and 'getState' params are\r\n// correctly typed to match your store.\r\nexport interface AppThunkAction<TAction> {\r\n    (dispatch: (action: TAction) => void, getState: () => ApplicationState): void;\r\n}\r\n","import { Action, Reducer } from 'redux';\r\n\r\n// -----------------\r\n// STATE - This defines the type of data maintained in the Redux store.\r\n\r\nexport interface CounterState {\r\n    count: number;\r\n}\r\n\r\n// -----------------\r\n// ACTIONS - These are serializable (hence replayable) descriptions of state transitions.\r\n// They do not themselves have any side-effects; they just describe something that is going to happen.\r\n// Use @typeName and isActionType for type detection that works even after serialization/deserialization.\r\n\r\nexport interface IncrementCountAction { type: 'INCREMENT_COUNT' }\r\nexport interface DecrementCountAction { type: 'DECREMENT_COUNT' }\r\n\r\n// Declare a 'discriminated union' type. This guarantees that all references to 'type' properties contain one of the\r\n// declared type strings (and not any other arbitrary string).\r\nexport type KnownAction = IncrementCountAction | DecrementCountAction;\r\n\r\n// ----------------\r\n// ACTION CREATORS - These are functions exposed to UI components that will trigger a state transition.\r\n// They don't directly mutate state, but they can have external side-effects (such as loading data).\r\n\r\nexport const actionCreators = {\r\n    increment: () => ({ type: 'INCREMENT_COUNT' } as IncrementCountAction),\r\n    decrement: () => ({ type: 'DECREMENT_COUNT' } as DecrementCountAction)\r\n};\r\n\r\n// ----------------\r\n// REDUCER - For a given state and action, returns the new state. To support time travel, this must not mutate the old state.\r\n\r\nexport const reducer: Reducer<CounterState> = (state: CounterState | undefined, incomingAction: Action): CounterState => {\r\n    if (state === undefined) {\r\n        return { count: 0 };\r\n    }\r\n\r\n    const action = incomingAction as KnownAction;\r\n    switch (action.type) {\r\n        case 'INCREMENT_COUNT':\r\n            return { count: state.count + 1 };\r\n        case 'DECREMENT_COUNT':\r\n            return { count: state.count - 1 };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import * as React from 'react';\r\nimport { Collapse, Container, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink } from 'reactstrap';\r\nimport { Image, Grid } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom';\r\nimport './NavMenu.css';\r\n\r\nexport default class NavMenu extends React.PureComponent<{}, { isOpen: boolean }> {\r\n    public state = {\r\n        isOpen: false\r\n    };\r\n\r\n    public render() {\r\n        var divStyle = {\r\n            fontStyle: 'italic',\r\n            fontFamily: 'Comic Sans MS',\r\n            fontSize:'13px'\r\n        };\r\n        return (\r\n            <header>\r\n                <Navbar className=\"navbar-expand-sm navbar-toggleable-sm border-bottom box-shadow mb-3\" light>\r\n                    <Container>\r\n                        <NavbarBrand tag={Link} to=\"/\">\r\n                            <Grid>\r\n                                <Grid.Column>\r\n                                    <div id='logo'><Image src=\"fit2fitter_small_logo_2.jpg\" size='small' /></div>\r\n                                    <div id='text' style={divStyle}>\r\n                                        <a>by Ida</a>\r\n                                    </div>\r\n                                </Grid.Column>\r\n                            </Grid>\r\n                        </NavbarBrand>\r\n                        <NavbarToggler onClick={this.toggle} className=\"mr-2\"/>\r\n                        <Collapse className=\"d-sm-inline-flex flex-sm-row-reverse\" isOpen={this.state.isOpen} navbar>\r\n                            <ul className=\"navbar-nav flex-grow\">\r\n                                <NavItem>\r\n                                    <NavLink tag={Link} className=\"text-dark\" to=\"/\">Home</NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    <NavLink tag={Link} className=\"text-dark\" to=\"/personal\">Macro</NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    <NavLink tag={Link} className=\"text-dark\" to=\"/measurements\">Measurements</NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    <NavLink tag={Link} className=\"text-dark\" to=\"/meals\">Meals</NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    <NavLink tag={Link} className=\"text-dark\" to=\"/activities\">Activities</NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    <NavLink tag={Link} className=\"text-dark\" to=\"/dashboard\">Dashboards</NavLink>\r\n                                </NavItem>\r\n                            </ul>\r\n                        </Collapse>\r\n                    </Container>\r\n                </Navbar>\r\n            </header>\r\n        );\r\n    }\r\n\r\n    private toggle = () => {\r\n        this.setState({\r\n            isOpen: !this.state.isOpen\r\n        });\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport NavMenu from './NavMenu';\r\n\r\nexport default (props: { children?: React.ReactNode }) => (\r\n    <React.Fragment>\r\n        <NavMenu/>\r\n        <Container>\r\n            {props.children}\r\n        </Container>\r\n    </React.Fragment>\r\n);\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect, Link } from 'react-router-dom';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Button, Form, Input, Grid, Icon, Menu } from 'semantic-ui-react'\r\nimport { ApplicationState } from '../store';\r\nimport * as LoginStore from '../store/Login';\r\n\r\ninterface IProps {\r\n}\r\n\r\ninterface IState {\r\n    username: string;\r\n    password: string;\r\n    activeItem: string;\r\n    error: string;\r\n    login: string;\r\n}\r\n\r\n// At runtime, Redux will merge together...\r\ntype LoginProps =\r\n    IProps\r\n    & LoginStore.LoginState // ... state we've requested from the Redux store\r\n    & typeof LoginStore.actionCreators // ... plus action creators we've requested\r\n    & RouteComponentProps<{ username: string, password: string }>; // ... plus incoming routing parameters\r\n    \r\nclass Home extends React.Component<LoginProps, IState > {\r\n    \r\n    onSubmit = () => {\r\n        this.setState({ username: '', password:'' });\r\n    }\r\n\r\n    updateInput = (event: any) => {\r\n        this.setState({ username: event.target.value });\r\n    }\r\n\r\n    updateInput2 = (event: any) => {\r\n        this.setState({ password: event.target.value });\r\n    }\r\n\r\n    constructor(props: LoginProps) {\r\n        super(props);\r\n        this.state = {\r\n            username: '', password: '', activeItem: '', error: '', login:''\r\n        };\r\n    }\r\n\r\n    handleItemClick = (e: any, { name }: any) => this.setState({ activeItem: name })\r\n\r\n    getAdmin = () => {\r\n        if (this.props.logins[0].username === 'admin') {\r\n            return (\r\n                <Menu fluid vertical icon='labeled'>\r\n                    <Menu.Item\r\n                        name='Master'\r\n                        onClick={this.handleItemClick}>\r\n                        <Icon color='olive' name='power' />\r\n                        Master View\r\n                    </Menu.Item>\r\n                </Menu>);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        var divStyle = {\r\n            fontSize: '15px'\r\n        };\r\n        var divLabelStyle2 = {\r\n            color: 'pink',\r\n            fontStyle: 'italic'\r\n        };\r\n        \r\n        if (this.state.login==='logging' && !this.props.isLoading && this.props.logins.length < 1) {\r\n            if (this.state.error !== 'Please Check Username or Password') {\r\n                this.setState({ error: 'Please Check Username or Password' });\r\n            }\r\n        }\r\n\r\n        if (this.props.logins.length > 0) {\r\n            if (this.state.error !== 'Login is Successfull') {\r\n                this.setState({ error: 'Login is Successfull' });\r\n            }\r\n\r\n            if (this.state.activeItem === 'Master') {\r\n                return (<Redirect to=\"/master\" />);\r\n            }\r\n\r\n            if (this.state.activeItem === 'Macro') {\r\n                return (<Redirect to=\"/personal\" />);\r\n            }\r\n\r\n            if (this.state.activeItem === 'Body') {\r\n                return (<Redirect to=\"/measurements\" />);\r\n            }\r\n\r\n            if (this.state.activeItem === 'Meal') {\r\n                return (<Redirect to=\"/meals\" />);\r\n            }\r\n\r\n            if (this.state.activeItem === 'Activity') {\r\n                return (<Redirect to=\"/activities\" />);\r\n            }\r\n\r\n            if (this.state.activeItem === 'Dashboard') {\r\n                return (<Redirect to=\"/dashboard\" />);\r\n            }\r\n\r\n            if (this.state.activeItem === 'EBook') {\r\n                return (<Redirect to=\"/ebook\" />);\r\n            }\r\n\r\n            if (this.state.activeItem === 'Admin') {\r\n                return (<Redirect to=\"/admin\" />);\r\n            }\r\n        //if (true) {\r\n            return (\r\n                <div>\r\n                    <Grid centered>\r\n                        <Grid.Row columns={2}>\r\n                            <Grid.Column width={8}>\r\n                                <Menu fluid vertical icon='labeled'>\r\n                                    {this.getAdmin()}\r\n                                    <Menu.Item\r\n                                        name='Macro'\r\n                                        onClick={this.handleItemClick}>\r\n                                        <Icon color='olive' name='balance scale' />\r\n                                        Macro Calculation\r\n                                    </Menu.Item>\r\n                                        <Menu.Item\r\n                                            name='Body'\r\n                                            onClick={this.handleItemClick}>\r\n                                            <Icon color='blue' name='calculator' />\r\n                                            Body Assessments\r\n                                    </Menu.Item>\r\n                                        <Menu.Item\r\n                                            name='Meal'\r\n                                            onClick={this.handleItemClick}>\r\n                                            <Icon color='green' name='food' />\r\n                                            Meals Tracker\r\n                                    </Menu.Item>\r\n                                    <Menu.Item\r\n                                            name='Activity'\r\n                                            onClick={this.handleItemClick}>\r\n                                            <Icon color='orange' name='child' />\r\n                                            Activities Tracker\r\n                                    </Menu.Item>\r\n                                </Menu>\r\n                            </Grid.Column>\r\n                            <Grid.Column width={8}>\r\n                                <Menu fluid vertical icon='labeled'>\r\n                                    <Menu.Item\r\n                                        name='Dashboard'\r\n                                        onClick={this.handleItemClick}>\r\n                                        <Icon color='pink' name='chart bar' />\r\n                                        Leaderboards\r\n                                    </Menu.Item>\r\n                                    <Menu.Item\r\n                                            name='EBook'\r\n                                            onClick={this.handleItemClick}>\r\n                                            <Icon color='purple' name='book' />\r\n                                            E-Books\r\n                                    </Menu.Item>\r\n                                    <Menu.Item\r\n                                        name='Admin'\r\n                                        onClick={this.handleItemClick}>\r\n                                        <Icon color='red' name='user' />\r\n                                        Admin\r\n                                    </Menu.Item>\r\n                                    <Menu.Item\r\n                                            name='Logout'\r\n                                            onClick={this.clearCredentials}>\r\n                                            <Icon color='black' name='power off' />\r\n                                            Logout\r\n                                    </Menu.Item>\r\n                                </Menu>\r\n                            </Grid.Column>\r\n                        </Grid.Row>\r\n                    </Grid>\r\n                </div>);\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div style={divLabelStyle2}>\r\n                    <h1>My Fitness Tracker</h1>\r\n                </div>\r\n                \r\n                <Form size=\"small\">\r\n                    <Form.Field>\r\n                        <label>Username </label>\r\n                        <Input type=\"username\" value={this.state.username} placeholder='Username' onChange={this.updateInput} />\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                        <label>Password </label>\r\n                        <Input type=\"password\" value={this.state.password} placeholder='Password' onChange={this.updateInput2} />\r\n                    </Form.Field>\r\n                    <div>\r\n                        <Button type='submit' primary onClick={this.getLoginCredentials}>Login</Button>\r\n                        <a>{this.state.error}</a>\r\n                    </div>\r\n                </Form>\r\n            </div>\r\n            );\r\n    }\r\n\r\n    private getLoginCredentials = () => {\r\n        if (this.state.username === '' || this.state.password === '') {\r\n            this.setState({ error: 'Please Dont Leave Empty Fields' });\r\n            return;\r\n        }\r\n        this.setState({ error: 'loading..' });\r\n        this.setState({ login: 'logging' });\r\n        this.props.requestLogout(this.state.username, this.state.password);\r\n        this.props.requestLogins(this.state.username, this.state.password);\r\n    }\r\n\r\n    private clearCredentials = () => {\r\n        this.setState({ login: 'logout' });\r\n        this.props.requestLogout(this.state.username, this.state.password);\r\n        this.setState({ error: 'Logout is Successfull' });\r\n    }\r\n}\r\n\r\n//export default connect()(Home);\r\nexport default connect(\r\n    (state: ApplicationState) => state.logins, // Selects which state properties are merged into the component's props\r\n    LoginStore.actionCreators // Selects which action creators are merged into the component's props\r\n)(Home as any);\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { ApplicationState } from '../store';\r\nimport * as CounterStore from '../store/Counter';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Button, Form, Input, Card, Icon, Image } from 'semantic-ui-react'\r\n\r\ntype CounterProps =\r\n    CounterStore.CounterState &\r\n    typeof CounterStore.actionCreators &\r\n    RouteComponentProps<{}>;\r\n\r\nclass Counter extends React.PureComponent<CounterProps> {\r\n    onSubmit = () => {\r\n        console.log(\"test\");\r\n        return <Redirect to=\"/login\" />\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <React.Fragment>\r\n                <h1>Counter</h1>\r\n\r\n                <p>This is a simple example of a React component.</p>\r\n\r\n                <Button basic onClick={this.onSubmit}>Login</Button>\r\n\r\n                <p aria-live=\"polite\">Current count: <strong>{this.props.count}</strong></p>\r\n\r\n                <button type=\"button\"\r\n                    className=\"btn btn-primary btn-lg\"\r\n                    onClick={() => { this.props.increment(); }}>\r\n                    Increment\r\n                </button>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default connect(\r\n    (state: ApplicationState) => state.counter,\r\n    CounterStore.actionCreators\r\n)(Counter);\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\nimport { ApplicationState } from '../store';\r\nimport * as WeatherForecastsStore from '../store/WeatherForecasts';\r\n\r\n// At runtime, Redux will merge together...\r\ntype WeatherForecastProps =\r\n  WeatherForecastsStore.WeatherForecastsState // ... state we've requested from the Redux store\r\n  & typeof WeatherForecastsStore.actionCreators // ... plus action creators we've requested\r\n  & RouteComponentProps<{ startDateIndex: string }>; // ... plus incoming routing parameters\r\n\r\n\r\nclass FetchData extends React.PureComponent<WeatherForecastProps> {\r\n  // This method is called when the component is first added to the document\r\n  public componentDidMount() {\r\n    this.ensureDataFetched();\r\n  }\r\n\r\n  // This method is called when the route parameters change\r\n  public componentDidUpdate() {\r\n    this.ensureDataFetched();\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <React.Fragment>\r\n        <h1 id=\"tabelLabel\">Weather forecast</h1>\r\n        <p>This component demonstrates fetching data from the server and working with URL parameters.</p>\r\n        {this.renderForecastsTable()}\r\n        {this.renderPagination()}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  private ensureDataFetched() {\r\n    const startDateIndex = parseInt(this.props.match.params.startDateIndex, 10) || 0;\r\n    this.props.requestWeatherForecasts(startDateIndex);\r\n  }\r\n\r\n  private renderForecastsTable() {\r\n    return (\r\n      <table className='table table-striped' aria-labelledby=\"tabelLabel\">\r\n        <thead>\r\n          <tr>\r\n            <th>Date</th>\r\n            <th>Temp. (C)</th>\r\n            <th>Temp. (F)</th>\r\n            <th>Summary</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {this.props.forecasts.map((forecast: WeatherForecastsStore.WeatherForecast) =>\r\n            <tr key={forecast.date}>\r\n              <td>{forecast.date}</td>\r\n              <td>{forecast.temperatureC}</td>\r\n              <td>{forecast.temperatureF}</td>\r\n              <td>{forecast.summary}</td>\r\n            </tr>\r\n          )}\r\n        </tbody>\r\n      </table>\r\n    );\r\n  }\r\n\r\n  private renderPagination() {\r\n    const prevStartDateIndex = (this.props.startDateIndex || 0) - 5;\r\n    const nextStartDateIndex = (this.props.startDateIndex || 0) + 5;\r\n\r\n    return (\r\n      <div className=\"d-flex justify-content-between\">\r\n        <Link className='btn btn-outline-secondary btn-sm' to={`/fetch-data/${prevStartDateIndex}`}>Previous</Link>\r\n        {this.props.isLoading && <span>Loading...</span>}\r\n        <Link className='btn btn-outline-secondary btn-sm' to={`/fetch-data/${nextStartDateIndex}`}>Next</Link>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  (state: ApplicationState) => state.weatherForecasts, // Selects which state properties are merged into the component's props\r\n  WeatherForecastsStore.actionCreators // Selects which action creators are merged into the component's props\r\n)(FetchData as any);\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Button, Segment, Grid, Header, Label, Input, Icon, Image, List, Flag } from 'semantic-ui-react'\r\nimport { ApplicationState } from '../store';\r\nimport * as LoginStore from '../store/Login';\r\nimport SemanticDatepicker from 'react-semantic-ui-datepickers';\r\nimport 'react-semantic-ui-datepickers/dist/react-semantic-ui-datepickers.css';\r\n\r\ninterface IProps {\r\n}\r\n\r\ninterface IState {\r\n    username: string;\r\n    password: string;\r\n    activeItem: string;\r\n    selectedDate: Date;\r\n    prevDate: Date;\r\n    guides: IActivityGuides;\r\n    totalActivities: ITotalDailyActivity;\r\n    activities: IActivity[];\r\n    updated: boolean;\r\n    apiUpdate: boolean;\r\n    activityDtos: IActivityDto[];\r\n    dateChanged: boolean;\r\n    clients: IClient[];\r\n    clientDtos: IClientDto[];\r\n}\r\n\r\ninterface IClient {\r\n    id: number\r\n    name: string;\r\n    age: number;\r\n    city: string;\r\n}\r\n\r\ninterface IActivityGuides {\r\n    calories: number;\r\n    steps: number;\r\n}\r\n\r\ninterface ITotalDailyActivity {\r\n    calories: number;\r\n    steps: number;\r\n}\r\n\r\ninterface IActivity {\r\n    name: string,\r\n    calories: number;\r\n    steps: number;\r\n    ActivityDesc: string;\r\n}\r\n\r\ninterface IClientDto {\r\n    id: number,\r\n    lastName: string;\r\n    firstName: string;\r\n    address: string;\r\n    city: string;\r\n    age: number;\r\n    created: string;\r\n}\r\n\r\ninterface IActivityDto {\r\n    id: number,\r\n    calories: number;\r\n    steps: number;\r\n    description: string;\r\n    check: boolean;\r\n    updated: string;\r\n    created: string;\r\n    clientId: number;\r\n}\r\n\r\n// At runtime, Redux will merge together...\r\ntype LoginProps =\r\n    IProps\r\n    & LoginStore.LoginState // ... state we've requested from the Redux store\r\n    & typeof LoginStore.actionCreators // ... plus action creators we've requested\r\n    & RouteComponentProps<{ username: string, password: string }>; // ... plus incoming routing parameters\r\n\r\nclass Dashboard extends React.Component<LoginProps, IState> {\r\n    public componentDidMount() {\r\n        this.props.getLogin();\r\n        var date = new Date();\r\n        date.setHours(0, 0, 0, 0);\r\n        this.setState({ selectedDate: date, prevDate: date });\r\n\r\n        if (this.props.logins.length > 0) {\r\n            //get client info\r\n            fetch('api/client/all')\r\n                .then(response => response.json() as Promise<IClientDto[]>)\r\n                .then(data => this.setState({\r\n                    clientDtos: data, apiUpdate: true\r\n                })).catch(error => console.log(error));\r\n\r\n            //get all activities\r\n            fetch('api/tracker/activity?date=' + date.toISOString())\r\n                .then(response => response.json() as Promise<IActivityDto[]>)\r\n                .then(data => this.setState({\r\n                    activityDtos: data, apiUpdate: true\r\n                })).catch(error => console.log(error));\r\n        }\r\n    }\r\n\r\n    onSubmit = () => {\r\n        this.setState({ username: '', password: '' });\r\n    }\r\n\r\n    updateInput = (event: any) => {\r\n        this.setState({ username: event.target.value });\r\n        console.log(event.target.value);\r\n    }\r\n\r\n    updateInput2 = (event: any) => {\r\n        this.setState({ password: event.target.value });\r\n        console.log(event.target.value);\r\n    }\r\n\r\n    addActivity = (event: any) => {\r\n        this.state.activities.push({ name: '', ActivityDesc: 'test', steps: 1, calories: 100 });\r\n        this.setState({ updated: !this.state.updated });\r\n        console.log(this.state.activities);\r\n    }\r\n\r\n    setValuesFromDto = () => {\r\n        if (this.state.clients.length > 0) {\r\n            return;\r\n        }\r\n\r\n        this.state.clientDtos.forEach(client => {\r\n            this.state.clients.push({ id: client.id, name: client.firstName, age: client.age, city: client.city });\r\n        });\r\n    }\r\n\r\n    constructor(props: LoginProps) {\r\n        super(props);\r\n        //this.updateParentCarb = this.updateParentCarb.bind(this);\r\n        this.state = {\r\n            username: '', password: '', activeItem: 'Breakfast',\r\n            selectedDate: new Date(),\r\n            prevDate: new Date(),\r\n            guides: { calories: 150, steps: 10000 },\r\n            totalActivities: { calories: 0, steps: 0 },\r\n            activities: [],\r\n            updated: false,\r\n            apiUpdate: false,\r\n            activityDtos: [],\r\n            dateChanged: false,\r\n            clientDtos: [],\r\n            clients:[]\r\n        };\r\n    }\r\n\r\n    handleItemClick = (e: any, { name }: any) => this.setState({ activeItem: name })\r\n\r\n    getFlag = (country: string) => {\r\n        if (country === 'au') {\r\n            return (<Flag name='au' />)\r\n        }\r\n\r\n        if (country === 'jp') {\r\n            return (<Flag name='jp' />)\r\n        }\r\n\r\n        if (country === 'my') {\r\n            return (<Flag name='my' />)\r\n        }\r\n\r\n        if (country === 'us') {\r\n            return (<Flag name='us' />)\r\n        }\r\n\r\n        if (country === 'ie') {\r\n            return (<Flag name='ie' />)\r\n        }\r\n    }\r\n\r\n    getRows = (type: string) => {\r\n        var sorted = this.state.activities.sort((a, b) => (a.steps > b.steps ? -1 : 1));\r\n        if (type === 'TCB') {\r\n            sorted = this.state.activities.sort((a, b) => (a.calories > b.calories ? -1 : 1));\r\n        }\r\n        return (\r\n            sorted.map((item, index) =>\r\n                <List.Item key={index}>\r\n                    <Image key={index} avatar src='https://react.semantic-ui.com/images/avatar/small/rachel.png' />\r\n                    <List.Content key={index + 1}>\r\n                        <List.Header key={index} as='a'>{item.name} {this.getFlag(item.ActivityDesc)}</List.Header>\r\n                        <List.Description key={index + 1}>\r\n                            Steps: {item.steps} Calories: {item.calories}\r\n                        </List.Description>\r\n                    </List.Content>\r\n                </List.Item>\r\n            ));\r\n    }\r\n\r\n    handleDateChange = (event: any, field: any) => {\r\n        var newDate = new Date(field['value']);\r\n        //console.log('1 --' + Math.abs((this.state.selectedDate.getTime() - newDate.getTime()) / (1000 * 3600 * 24)));\r\n        //console.log('2 --' + Math.abs((this.state.prevDate.getTime() - newDate.getTime()) / (1000 * 3600 * 24)));\r\n        var dayDiff = Math.abs((this.state.prevDate.getTime() - newDate.getTime()) / (1000 * 3600 * 24));\r\n        if (dayDiff < 356) {\r\n            this.setState({ prevDate: this.state.selectedDate });\r\n            this.setState({ selectedDate: new Date(field['value']), activityDtos: [], dateChanged: true, apiUpdate: true })\r\n        }\r\n    }\r\n\r\n    setActivities = () => {\r\n        if (this.state.activityDtos.length > 0 && this.state.clients.length > 0) {\r\n\r\n            if (this.state.activities.length === this.state.activityDtos.length) {\r\n                return;\r\n            }\r\n\r\n            this.state.activityDtos.forEach(activity => {\r\n                this.state.activities.push({ name: this.state.clients[this.state.clients.findIndex(x => x.id === activity.clientId)].name, ActivityDesc: this.state.clients[this.state.clients.findIndex(x => x.id === activity.clientId)].city, calories: activity.calories, steps: activity.steps });\r\n            })\r\n        }\r\n    }\r\n\r\n    getActivities = () => {\r\n        fetch('api/tracker/activity?date=' + this.state.selectedDate.toISOString())\r\n            .then(response => response.json() as Promise<IActivityDto[]>)\r\n            .then(data => {\r\n                this.setState({\r\n                    activityDtos: data, apiUpdate: true\r\n                });\r\n                //this.intervalID = setTimeout(this.getActivities.bind(this), 10000);\r\n            }).catch(error => console.log(error));\r\n    }\r\n\r\n    resetActivities = () => {\r\n        while (this.state.activities.length > 0) {\r\n            this.state.activities.pop();\r\n        }\r\n\r\n        this.setState({\r\n            activities: this.state.activities\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if (this.props.logins.length > 0) {\r\n            if (this.state.dateChanged === true) {\r\n                this.setState({ dateChanged: false });\r\n                this.resetActivities();\r\n                this.getActivities();\r\n            }\r\n\r\n            if (this.state.apiUpdate === true) {\r\n                this.setValuesFromDto();\r\n                this.setActivities();\r\n                this.setState({ activities: this.state.activities, apiUpdate: false, updated: !this.state.updated });\r\n            }\r\n        return (\r\n            <div>\r\n                <Grid centered>\r\n                    <Grid.Row columns={2}>\r\n                        <Grid.Column verticalAlign='middle' floated='left' textAlign='left'>\r\n                            <Label size='large' as='a' color='pink' basic circular>Daily Leaderboards</Label>\r\n                        </Grid.Column>\r\n                        <Grid.Column verticalAlign='middle' floated='right' textAlign='right'>\r\n                            <SemanticDatepicker value={this.state.selectedDate} date={new Date()} onChange={this.handleDateChange} showToday />\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                    <Grid.Row columns={2}>\r\n                        <Grid.Column>\r\n                            <Segment inverted attached='top'>\r\n                                <h5>Steps Leaderboard</h5>\r\n                            </Segment>\r\n                            <Segment attached='bottom'>\r\n                                <List>\r\n                                    {this.getRows('TS')}\r\n                                </List>\r\n                            </Segment>\r\n                        </Grid.Column>\r\n                        <Grid.Column>\r\n                            <Segment inverted attached='top'>\r\n                                <h5>TCB Leaderboard</h5>\r\n                            </Segment>\r\n                            <Segment attached='bottom'>\r\n                                <List>\r\n                                    {this.getRows('TCB')}\r\n                                </List>\r\n                            </Segment>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                </Grid>\r\n            </div>);\r\n        }\r\n        return (<Redirect to=\"/\" />);\r\n    }\r\n\r\n    private getLoginCredentials = () => {\r\n        this.props.requestLogins(this.state.username, this.state.password);\r\n    }\r\n\r\n    private clearCredentials = () => {\r\n        this.props.requestLogout(this.state.username, this.state.password);\r\n    }\r\n}\r\n\r\n//export default connect()(Home);\r\nexport default connect(\r\n    (state: ApplicationState) => state.logins, // Selects which state properties are merged into the component's props\r\n    LoginStore.actionCreators // Selects which action creators are merged into the component's props\r\n)(Dashboard as any);","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Button, Form, Input, Grid, Label, Icon, Card, Checkbox } from 'semantic-ui-react'\r\n\r\ninterface IProps {\r\n    activities: IActivity[];\r\n    guides: IActivityGuides;\r\n    update: boolean;\r\n    updateActivities: Function\r\n}\r\n\r\ninterface IActivityGuides {\r\n    calories: number;\r\n    steps: number;\r\n}\r\n\r\ninterface IActivity {\r\n    calories: number;\r\n    steps: number;\r\n    ActivityDesc: string;\r\n    check: boolean;\r\n}\r\n\r\ninterface IState {\r\n    username: string;\r\n    password: string;\r\n    updated: boolean;\r\n    dirty: boolean;\r\n    activities: IActivity[];\r\n}\r\n\r\nclass ActivityTable extends React.Component<IProps, IState> {\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            username: '', password: '', updated: false, dirty: false, activities: []\r\n        };\r\n    }\r\n\r\n    public componentDidMount() {\r\n        this.setState({\r\n            activities: this.props.activities\r\n        });\r\n    }\r\n\r\n    getColour = (total: number) => {\r\n        if (total > 50.0 && total < 100) {\r\n            return 'orange';\r\n        }\r\n\r\n        if (total === 100) {\r\n            return 'teal';\r\n        }\r\n\r\n        if (total > 100.0) {\r\n            return 'red';\r\n        }\r\n\r\n        return 'black';\r\n    }\r\n\r\n    handleActivityChange = (field: any, value: any) => {\r\n        this.state.activities[parseInt(value['className'])]['ActivityDesc'] = value['value'];\r\n        this.setState({ activities: this.state.activities, updated: true});\r\n    }\r\n\r\n    handleCaloriesChange = (field: any, value: any) => {\r\n        if (parseInt(value['value']) === 0 || isNaN(parseInt(value['value']))) {\r\n            this.state.activities[parseInt(value['className'])]['calories'] = 0;\r\n        }\r\n        else {\r\n            this.state.activities[parseInt(value['className'])]['calories'] = parseInt(value['value']);\r\n        }\r\n        this.setState({ activities: this.state.activities, updated: true });\r\n    }\r\n\r\n    handleStepsChange = (field: any, value: any) => {\r\n        console.log(parseInt(value['value']));\r\n        if ((parseInt(value['value']) === 0) || isNaN(parseInt(value['value']))) {\r\n            this.state.activities[parseInt(value['className'])]['steps'] = 0;\r\n        }\r\n        else {\r\n            this.state.activities[parseInt(value['className'])]['steps'] = parseInt(value['value']);\r\n        }\r\n        this.setState({ activities: this.state.activities, updated: true });\r\n    }\r\n\r\n    handleCheckChange = (field: any, value: any) => {\r\n        console.log(value['checked']);\r\n        this.state.activities[parseInt(value['className'])]['check'] = value['value'];\r\n        this.setState({ activities: this.state.activities, updated: true });\r\n    }\r\n\r\n    getRows = () => {\r\n        return (\r\n            this.state.activities.map((item, index) =>\r\n                <Grid.Row className={'row'} key={index} columns={4} stretched>\r\n                    <Grid.Column className={'col_checkbox'} key={index} width={2} verticalAlign='middle' textAlign='center'>\r\n                        <Checkbox className={index.toString()} checked={item.check} key={index} onChange={this.handleCheckChange} />\r\n                    </Grid.Column>\r\n                    <Grid.Column className={'col_desc'} key={index + 1} width={6}>\r\n                        <Input className={index.toString()} key={index + 1} list='activities' onChange={this.handleActivityChange} value={item.ActivityDesc} placeholder='Choose Activity...' />\r\n                        <datalist className={'datalist_desc'} key={index + 2} id='activities'>\r\n                            <option key={index + 2} value='Jogging'>Jogging</option>\r\n                            <option key={index + 3} value='Walking'>Walking</option>\r\n                            <option key={index + 4} value='HIIT'>HIIT</option>\r\n                            <option key={index + 5} value='HIIT Step'>HIIT Step</option>\r\n                            <option key={index + 6} value='Mixed HIIT'>Mixed HIIT</option>\r\n                            <option key={index + 7} value='HIIT Dance'>HIIT Dance</option>\r\n                            <option key={index + 8} value='Body Pump'>Body Pump</option>\r\n                            <option key={index + 9} value='Boxing Circuit'>Boxing Circuit</option>\r\n                            <option key={index + 10} value='Boot Camp'>Boot Camp</option>\r\n                            <option key={index + 11} value='MetaFit'>MetaFit</option>\r\n                            <option key={index + 12} value='Pilates'>Pilates</option>\r\n                            <option key={index + 13} value='Home Workout'>Home Workout</option>\r\n                            <option key={index + 14} value='Weekly Challenge'>Weekly Challenge</option>\r\n                        </datalist>\r\n                    </Grid.Column>\r\n                    <Grid.Column className={'col_calories'} key={index + 2} width={4}>\r\n                        <Input className={index.toString()} key={index + 2} as='a' size='mini' onChange={this.handleCaloriesChange} value={item.calories} placeholder='Calories' />\r\n                    </Grid.Column>\r\n                    <Grid.Column className={'col_steps'} key={index + 3} as='a' width={4}>\r\n                        <Input className={index.toString()} key={index + 3} size='mini' onChange={this.handleStepsChange} value={item.steps} placeholder='Steps' />\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            ));\r\n    }\r\n\r\n    render() {\r\n        \r\n        if (this.state.dirty !== this.props.update)\r\n        {\r\n            //console.log(this.props.activities);\r\n            this.setState({ dirty: this.props.update, activities: this.props.activities });\r\n        }\r\n\r\n        if (this.state.updated === true) {\r\n            this.setState({ updated: false });\r\n            this.props.updateActivities(this.state.activities);\r\n        }\r\n\r\n        const totalCalories = (this.props.activities.reduce(function (a, b) { return a + b.calories; }, 0));\r\n        const totalSteps = (this.props.activities.reduce(function (a, b) { return a + b.steps; }, 0));\r\n        const totalStepsPercent = (totalSteps / this.props.guides.steps) * 100.0;\r\n        return (\r\n            <Grid centered>\r\n                <Grid.Row columns={4} textAlign='center'>\r\n                    <Grid.Column width={2}>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={6} textAlign='left'>\r\n                        <div><a>Activity</a></div>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={4} textAlign='left'>\r\n                        <div><a>Calories</a></div>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={4} textAlign='left'>\r\n                        <div><a>Steps</a></div>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n                {this.getRows()}\r\n            </Grid>);\r\n    }\r\n}\r\n\r\nexport default connect()(ActivityTable);","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Button, Form, Input, Grid, Label, Icon, Card, Header } from 'semantic-ui-react'\r\n\r\ninterface IProps {\r\n    activities: IActivity[];\r\n    guides: IActivityGuides;\r\n    update: boolean;\r\n}\r\n\r\ninterface IActivityGuides {\r\n    calories: number;\r\n    steps: number;\r\n}\r\n\r\ninterface IActivity {\r\n    calories: number;\r\n    steps: number;\r\n    ActivityDesc: string;\r\n}\r\n\r\ninterface IState {\r\n    username: string;\r\n    password: string;\r\n    updated: boolean;\r\n}\r\n\r\nclass ActivityHeader extends React.Component<IProps, IState> {\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            username: '', password: '', updated: false\r\n        };\r\n    }\r\n\r\n    getColour = (total: number) => {\r\n        if (total > 50.0 && total < 100) {\r\n            return 'orange';\r\n        }\r\n\r\n        if (total === 100) {\r\n            return 'teal';\r\n        }\r\n\r\n        if (total > 100.0) {\r\n            return 'red';\r\n        }\r\n\r\n        return 'black';\r\n    }\r\n\r\n    render() {\r\n        var divLabelStyle2 = {\r\n            color: '#0a0212',\r\n            backgroundColor: 'Yellow'\r\n        };\r\n\r\n        var divLabelStyle3 = {\r\n            color: '#fffafa',\r\n            backgroundColor: 'Red'\r\n        };\r\n\r\n        var divLabelStyle4 = {\r\n            color: '#fffafa',\r\n            fontFamily: 'Comic Sans MS',\r\n            fontSize: '20px'\r\n        };\r\n\r\n        if (this.state.updated !== this.props.update)\r\n        {\r\n            this.setState({ updated: this.props.update });\r\n        }\r\n\r\n        const totalCalories = (this.props.activities.reduce(function (a, b) { return a + b.calories; }, 0));\r\n        const totalSteps = (this.props.activities.reduce(function (a, b) { return a + b.steps; }, 0));\r\n\r\n        const totalStepsPercent = (totalSteps / this.props.guides.steps) * 100.0;\r\n        \r\n        return (\r\n            <Grid centered>\r\n                <Grid.Row columns={1} color='pink' textAlign='center'>\r\n                    <a style={divLabelStyle4}>Total Activities</a>\r\n                </Grid.Row>\r\n                <Grid.Row columns={2} textAlign='center'>\r\n                    <Grid.Column color='black' textAlign='center'>\r\n                        <div><a>Calories</a></div>\r\n                        <div style={divLabelStyle2}><a>{totalCalories}</a></div>\r\n                    </Grid.Column>\r\n                    <Grid.Column color='black' textAlign='center'>\r\n                        <div><a>Steps</a></div>\r\n                        <div style={divLabelStyle3}><a>{totalSteps}</a></div>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            </Grid>);\r\n    }\r\n}\r\n\r\nexport default connect()(ActivityHeader);","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Button, Segment, Grid, Menu, Label, Input, Icon } from 'semantic-ui-react'\r\nimport { ApplicationState } from '../store';\r\nimport * as LoginStore from '../store/Login';\r\nimport SemanticDatepicker from 'react-semantic-ui-datepickers';\r\nimport 'react-semantic-ui-datepickers/dist/react-semantic-ui-datepickers.css';\r\nimport ActivityTable from './ActivityTable'\r\nimport ActivityHeader from './ActivityHeader'\r\n\r\ninterface IProps {\r\n}\r\n\r\ninterface IState {\r\n    username: string;\r\n    password: string;\r\n    selectedDate: Date;\r\n    prevDate: Date;\r\n    guides: IActivityGuides;\r\n    totalActivities: ITotalDailyActivity;\r\n    activities: IActivity[];\r\n    activityDtos: IActivityDto[];\r\n    updated: boolean;\r\n    apiUpdate: boolean;\r\n    savingStatus: string;\r\n    dateChanged: boolean;\r\n}\r\n\r\ninterface IActivityGuides {\r\n    calories: number;\r\n    steps: number;\r\n}\r\n\r\ninterface ITotalDailyActivity {\r\n    calories: number;\r\n    steps: number;\r\n}\r\n\r\ninterface IActivity {\r\n    calories: number;\r\n    steps: number;\r\n    ActivityDesc: string;\r\n    check: boolean;\r\n}\r\n\r\ninterface IActivityDto {\r\n    id: number,\r\n    calories: number;\r\n    steps: number;\r\n    description: string;\r\n    check: boolean;\r\n    updated: string;\r\n    created: string;\r\n    clientId: number;\r\n}\r\n\r\n// At runtime, Redux will merge together...\r\ntype LoginProps =\r\n    IProps\r\n    & LoginStore.LoginState // ... state we've requested from the Redux store\r\n    & typeof LoginStore.actionCreators // ... plus action creators we've requested\r\n    & RouteComponentProps<{ username: string, password: string }>; // ... plus incoming routing parameters\r\n\r\nclass Activities extends React.Component<LoginProps, IState> {\r\n\r\n    public componentDidMount() {\r\n        this.props.getLogin();\r\n        var date = new Date();\r\n        date.setHours(0, 0, 0, 0);\r\n        this.setState({ selectedDate: date, prevDate: date });\r\n        \r\n        if (this.props.logins.length > 0) {\r\n\r\n            //get all activities\r\n            fetch('api/tracker/' + this.props.logins[0].clientId + '/activity?date=' + date.toISOString())\r\n                .then(response => response.json() as Promise<IActivityDto[]>)\r\n                .then(data => this.setState({\r\n                    activityDtos: data, apiUpdate: true\r\n                })).catch(error => console.log(error));\r\n        }\r\n    }\r\n\r\n    onSubmit = () => {\r\n        this.setState({ username: '', password: '' });\r\n    }\r\n\r\n    updateInput = (event: any) => {\r\n        this.setState({ username: event.target.value });\r\n    }\r\n\r\n    updateInput2 = (event: any) => {\r\n        this.setState({ password: event.target.value });\r\n    }\r\n\r\n    addActivity = (event: any) => {\r\n        this.state.activities.push({ ActivityDesc: '', steps: 0, calories: 0, check: false });\r\n        this.setState({ updated: !this.state.updated });\r\n    }\r\n\r\n    removeActivities = (event: any) => {\r\n        var arr = this.state.activities.filter(obj => obj.check === false);\r\n        this.setState({ updated: !this.state.updated, activities: arr });\r\n    }\r\n\r\n    updateActivities = (input:IActivity[]) => {\r\n        this.setState({\r\n            activities: input\r\n        });\r\n        this.setState({ updated: !this.state.updated, savingStatus: 'Not Saved' });\r\n    }\r\n\r\n    constructor(props: LoginProps) {\r\n        super(props);\r\n        this.updateActivities = this.updateActivities.bind(this);\r\n        this.state = {\r\n            username: '', password: '',\r\n            selectedDate: new Date(),\r\n            prevDate: new Date(),\r\n            guides: { calories: 150, steps: 10000 },\r\n            totalActivities: { calories: 0, steps: 0 },\r\n            activities: [],\r\n            activityDtos: [],\r\n            updated: false,\r\n            apiUpdate: false,\r\n            savingStatus: 'Saved',\r\n            dateChanged: false\r\n        };\r\n    }\r\n\r\n    setActivities = () => {\r\n        if (this.state.activityDtos.length > 0) {\r\n\r\n            if (this.state.activities.length === this.state.activityDtos.length) {\r\n                return;\r\n            }\r\n\r\n            this.state.activityDtos.forEach(activity => {\r\n                this.state.activities.push({ ActivityDesc: activity.description, calories: activity.calories, steps: activity.steps, check: false });\r\n            })\r\n        }\r\n    }\r\n\r\n    deleteActivities = () => {\r\n        this.setState({ savingStatus: 'Saving in progress' })\r\n        var fetchStr = 'api/tracker/' + this.props.logins[0].clientId + '/activity/delete?date=' + this.state.selectedDate.toISOString();\r\n        fetch(fetchStr, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n            }\r\n        }).then(response => response.json()).then(data => this.setState({ savingStatus: 'Saving in progress' })).catch(error => console.log('delete meals---------->' + error));\r\n    }\r\n\r\n    saveActivities = () => {\r\n        if (this.state.activities.length < 1) {\r\n            this.setState({ savingStatus: 'Saved' })\r\n            return;\r\n        }\r\n\r\n        this.setState({ savingStatus: 'Saving in progress' })\r\n        var fetchStr = 'api/tracker/activity?date=' + this.state.selectedDate.toISOString();\r\n\r\n        this.state.activities.forEach(activity => {\r\n            fetch(fetchStr, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    Id: 0,\r\n                    Calories: activity.calories,\r\n                    Steps: activity.steps,\r\n                    Description: activity.ActivityDesc,\r\n                    Updated: new Date(),\r\n                    Created: this.state.selectedDate.toISOString(),\r\n                    ClientId: this.props.logins[0].clientId,\r\n                })\r\n            }).then(response => response.json()).then(data => this.setState({ savingStatus: 'Saved' })).catch(error => console.log('put macros ---------->' + error));\r\n        });\r\n    }\r\n\r\n    onSave = () => {\r\n        // delete rows\r\n        this.deleteActivities();\r\n\r\n        // add rows\r\n        setTimeout(() => {\r\n            this.saveActivities();\r\n        }, 2000);\r\n    }\r\n\r\n    getActivities = () => {\r\n        fetch('api/tracker/' + this.props.logins[0].clientId + '/activity?date=' + this.state.selectedDate.toISOString())\r\n            .then(response => response.json() as Promise<IActivityDto[]>)\r\n            .then(data => this.setState({\r\n                activityDtos: data, apiUpdate: true\r\n            })).catch(error => console.log(error));\r\n    }\r\n\r\n    resetActivities = () => {\r\n        while (this.state.activities.length > 0) {\r\n            this.state.activities.pop();\r\n        }\r\n\r\n        this.setState({\r\n            activities: this.state.activities\r\n        });\r\n    }\r\n\r\n    handleDateChange = (event: any, field: any) => {\r\n        var newDate = new Date(field['value']);\r\n        //console.log('1 --' + Math.abs((this.state.selectedDate.getTime() - newDate.getTime()) / (1000 * 3600 * 24)));\r\n        //console.log('2 --' + Math.abs((this.state.prevDate.getTime() - newDate.getTime()) / (1000 * 3600 * 24)));\r\n        var dayDiff = Math.abs((this.state.prevDate.getTime() - newDate.getTime()) / (1000 * 3600 * 24));\r\n        if (dayDiff < 356) {\r\n            this.setState({ prevDate: this.state.selectedDate });\r\n            this.setState({ selectedDate: new Date(field['value']), activityDtos:[], dateChanged: true, apiUpdate: true })\r\n        }\r\n    }\r\n\r\n    getColour = () => {\r\n        if (this.state.savingStatus === 'Not Saved') {\r\n            return 'red';\r\n        }\r\n\r\n        return 'green';\r\n    }\r\n\r\n    render() {\r\n        if (this.props.logins.length > 0) {\r\n            if (this.state.dateChanged === true) {\r\n                this.setState({ dateChanged: false });\r\n                this.resetActivities();\r\n                this.getActivities();\r\n                //console.log('--> activities' + this.state.activities);\r\n                //console.log('--> activitiesDto' + this.state.activityDtos);\r\n            }\r\n\r\n            if (this.state.apiUpdate === true) {\r\n                this.setActivities();\r\n                this.setState({ activities: this.state.activities, apiUpdate: false, updated: !this.state.updated });\r\n            }\r\n\r\n            var divLabelStyle = {\r\n                color: '#fffafa',\r\n                backgroundColor: this.getColour()\r\n            };\r\n        return (\r\n            <div>\r\n                <Grid centered>\r\n                    <Grid.Row columns={2}>\r\n                        <Grid.Column verticalAlign='middle' floated='left' textAlign='left'>\r\n                            <Label size='large' as='a' color='pink' basic circular>Daily Activities Tracker</Label>\r\n                        </Grid.Column>\r\n                        <Grid.Column verticalAlign='middle' floated='right' textAlign='right'>\r\n                            <SemanticDatepicker value={this.state.selectedDate} date={new Date()} onChange={this.handleDateChange} showToday />\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                    <Grid.Row>\r\n                        <Grid.Column>\r\n                            <Segment textAlign='center'>\r\n                                <ActivityHeader activities={this.state.activities} guides={this.state.guides} update={this.state.updated} />\r\n                            </Segment>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                    <Grid.Row>\r\n                        <Grid.Column>\r\n                            <Segment attached='top'>\r\n                                <Grid centered>\r\n                                    <Grid.Row columns={4}>\r\n                                        <Grid.Column floated='left'>\r\n                                            <Button size='tiny' color='black' fluid icon onClick={this.removeActivities}>\r\n                                                <Icon name='minus' />\r\n                                            </Button>\r\n                                        </Grid.Column>\r\n                                        <Grid.Column>\r\n                                        </Grid.Column>\r\n                                        <Grid.Column>\r\n                                        </Grid.Column>\r\n                                        <Grid.Column floated='right'>\r\n                                            <Button size='tiny' color='black' fluid icon onClick={this.addActivity}>\r\n                                                <Icon name='plus' />\r\n                                            </Button>\r\n                                        </Grid.Column>\r\n                                    </Grid.Row>\r\n                                </Grid>\r\n                            </Segment>\r\n                            <Segment textAlign='center' attached='bottom'>\r\n                                <ActivityTable updateActivities={this.updateActivities} activities={this.state.activities} guides={this.state.guides} update={this.state.updated} />\r\n                            </Segment>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                    <Grid.Row>\r\n                        <Grid.Column verticalAlign='middle' width={16} textAlign='center' floated='left'>\r\n                            <div style={divLabelStyle}>\r\n                                <a>{this.state.savingStatus}</a>\r\n                            </div>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                    <Grid.Row columns={3}>\r\n                        <Grid.Column width={4} textAlign='left' floated='left'>\r\n                            <Button floated='left' size='tiny' secondary>Cancel</Button>\r\n                        </Grid.Column>\r\n                        <Grid.Column width={4} textAlign='left' floated='left'>\r\n                            <Button floated='left' size='tiny' onClick={this.onSave} primary>Save</Button>\r\n                        </Grid.Column>\r\n                        <Grid.Column verticalAlign='middle' width={8} textAlign='left' floated='left'>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                </Grid>\r\n            </div>);\r\n        }\r\n        return (<Redirect to=\"/\" />);\r\n    }\r\n\r\n    private getLoginCredentials = () => {\r\n        this.props.requestLogins(this.state.username, this.state.password);\r\n    }\r\n\r\n    private clearCredentials = () => {\r\n        this.props.requestLogout(this.state.username, this.state.password);\r\n    }\r\n}\r\n\r\n//export default connect()(Home);\r\nexport default connect(\r\n    (state: ApplicationState) => state.logins, // Selects which state properties are merged into the component's props\r\n    LoginStore.actionCreators // Selects which action creators are merged into the component's props\r\n)(Activities as any);","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Button, Form, Input, Grid, Label, Icon, Segment, Checkbox } from 'semantic-ui-react'\r\n\r\ninterface IProps {\r\n    meals: IMealDetails[] \r\n    update: boolean;\r\n    macroType: string;\r\n    mealType: number;\r\n    updateMeals: Function\r\n}\r\n\r\ninterface IMealDetails {\r\n    macro: number;\r\n    mealDesc: string;\r\n    check: boolean;\r\n}\r\n\r\ninterface IState {\r\n    username: string;\r\n    password: string;\r\n    updated: boolean;\r\n    macroType: string;\r\n    mealType: number;\r\n    meals: IMealDetails[];\r\n    dirty: boolean;\r\n}\r\n\r\nclass MacroTable extends React.Component<IProps, IState> {\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            username: '', password: '', updated: false, macroType: 'Carb', mealType: 1, meals: [], dirty: false\r\n        };\r\n    }\r\n\r\n    public componentDidMount() {\r\n        this.setState({\r\n            meals: this.props.meals, macroType: this.props.macroType\r\n        });\r\n    }\r\n\r\n    handleMealDescChange = (field: any, value: any) => {\r\n        this.state.meals[parseInt(value['className'])]['mealDesc'] = value['value'];\r\n        this.setState({ meals: this.state.meals, updated: true });\r\n    }\r\n\r\n    handleMacroChange = (field: any, value: any) => {\r\n        //if (parseFloat(value['value']) === 0 || isNaN(parseFloat(value['value']))) {\r\n        //    this.state.meals[parseInt(value['className'])]['macro'] = 0.0;\r\n        //}\r\n        //else {\r\n        //    const re = /^[-+,0-9,\\.]+$/;\r\n        //    if (value['value'] === '' || re.test(value['value'])) {\r\n        //        this.state.meals[parseInt(value['className'])]['macro'] = value['value'];\r\n        //    }\r\n        //}\r\n\r\n        const re = /^[-+,0-9,\\.]+$/;\r\n        if (value['value'] === '' || re.test(value['value'])) {\r\n            this.state.meals[parseInt(value['className'])]['macro'] = value['value'];\r\n            this.setState({ meals: this.state.meals, updated: true });\r\n        }\r\n    }\r\n\r\n    handleCheckChange = (field: any, value: any) => {\r\n        console.log(value['checked']);\r\n        this.state.meals[parseInt(value['className'])]['check'] = value['value'];\r\n        this.setState({ meals: this.state.meals, updated: true });\r\n    }\r\n\r\n    getRows = () => {\r\n        return (\r\n            this.state.meals.map((item, index) =>\r\n                <Grid.Row className={'row'} key={index} columns={3} stretched>\r\n                    <Grid.Column className={'col_checkbox'} key={index} width={2} verticalAlign='middle' textAlign='center'>\r\n                        <Checkbox className={index.toString()} checked={item.check} key={index} onChange={this.handleCheckChange} />\r\n                    </Grid.Column>\r\n                    <Grid.Column className={'col_desc'} key={index + 1} width={8}>\r\n                        <Input className={index.toString()} key={index + 1} onChange={this.handleMealDescChange} value={item.mealDesc} placeholder='Meal Desc...' />\r\n                    </Grid.Column>\r\n                    <Grid.Column className={'col_macro'} key={index + 2} width={6}>\r\n                        <Input className={index.toString()} key={index + 2} as='a' size='mini' onChange={this.handleMacroChange} value={item.macro} placeholder='Macro' />\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            ));\r\n    }\r\n\r\n    addActivity = (event: any) => {\r\n        this.state.meals.push({ mealDesc: '', macro: 0, check: false });\r\n        this.setState({ updated: true });\r\n    }\r\n\r\n    removeActivities = (event: any) => {\r\n        var arr = this.state.meals.filter(obj => obj.check === false);\r\n        this.setState({ updated: true, meals: arr });\r\n    }\r\n\r\n    render() {\r\n\r\n        if (this.state.macroType !== this.props.macroType ||\r\n            this.state.mealType !== this.props.mealType)\r\n        {\r\n            this.setState({ meals: this.props.meals, macroType: this.props.macroType, mealType: this.props.mealType });\r\n        }\r\n        else if (this.props.update !== this.state.dirty) {\r\n            this.setState({ meals: this.props.meals, macroType: this.props.macroType, mealType: this.props.mealType, dirty: this.props.update });\r\n        }\r\n\r\n        if (this.state.updated === true) {\r\n            this.setState({ updated: false });\r\n            this.props.updateMeals(this.state.meals, this.state.macroType);\r\n        }\r\n\r\n        var divLabelStyle5 = {\r\n            color: '#0a0212',\r\n            backgroundColor: 'White'\r\n        };\r\n\r\n        return (\r\n            <Grid centered>\r\n                <Grid.Column>\r\n                    <Segment attached='top'>\r\n                        <Grid centered>\r\n                            <Grid.Row columns={3}>\r\n                                <Grid.Column floated='left' width={4}>\r\n                                    <Button size='tiny' color='black' fluid icon onClick={this.removeActivities}>\r\n                                        <Icon name='minus' />\r\n                                    </Button>\r\n                                </Grid.Column>\r\n                                <Grid.Column width={8} verticalAlign='middle'>\r\n                                    <a style={divLabelStyle5}>Meals Details</a>\r\n                                </Grid.Column>\r\n                                <Grid.Column floated='right' width={4}>\r\n                                    <Button size='tiny' color='black' fluid icon onClick={this.addActivity}>\r\n                                        <Icon name='plus' />\r\n                                    </Button>\r\n                                </Grid.Column>\r\n                            </Grid.Row>\r\n                        </Grid>\r\n                    </Segment>\r\n                    <Segment textAlign='center' attached='bottom'>\r\n                        <Grid centered>\r\n                            <Grid.Row columns={3} textAlign='center'>\r\n                                <Grid.Column width={2}>\r\n                                </Grid.Column>\r\n                                <Grid.Column width={8} textAlign='left'>\r\n                                    <div><a>Description</a></div>\r\n                                </Grid.Column>\r\n                                <Grid.Column width={6} textAlign='left'>\r\n                                    <div><a>Macro</a></div>\r\n                                </Grid.Column>\r\n                            </Grid.Row>\r\n                            {this.getRows()}\r\n                        </Grid>\r\n                    </Segment>\r\n                </Grid.Column>\r\n            </Grid>);\r\n    }\r\n}\r\n\r\nexport default connect()(MacroTable);","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Grid, Menu } from 'semantic-ui-react'\r\nimport MacroTable from './MacroTable'\r\n\r\ninterface IProps {\r\n    meal: IMeal,\r\n    guides: IMacroGuides,\r\n    updateParentCarb: Function,\r\n    update: boolean;\r\n}\r\n\r\ninterface IMeal {\r\n    carb: IMealDetails[];\r\n    protein: IMealDetails[];\r\n    fat: IMealDetails[];\r\n    fruits: IMealDetails[];\r\n    type: number;\r\n}\r\n\r\ninterface IMealDetails {\r\n    macro: number;\r\n    mealDesc: string;\r\n    check: boolean;\r\n}\r\n\r\ninterface IMacroGuides {\r\n    carb: number;\r\n    protein: number;\r\n    fat: number;\r\n    fruits: number;\r\n}\r\n\r\ninterface IState {\r\n    activeItem: string;\r\n    username: string;\r\n    password: string;\r\n    carb: IMealDetails[];\r\n    protein: IMealDetails[];\r\n    fat: IMealDetails[];\r\n    veg: IMealDetails[];\r\n    type: number;\r\n    update: boolean;\r\n    updated: boolean;\r\n    dirty: boolean;\r\n}\r\n\r\nclass MacroNew extends React.Component<IProps, IState> {\r\n\r\n    updateMeals = (meals: IMealDetails[], type: string) => {\r\n        if (type === 'Carb') {\r\n            this.setState({ update: true, carb: meals });\r\n            return;\r\n        }\r\n\r\n        if (type == 'Protein') {\r\n            this.setState({ update: true, protein: meals });\r\n            return;\r\n        }\r\n\r\n        if (type == 'Fat') {\r\n            this.setState({ update: true, fat: meals });\r\n            return;\r\n        }\r\n\r\n        this.setState({ update: true, veg: meals });\r\n    }\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.updateMeals = this.updateMeals.bind(this);\r\n        this.state = {\r\n            activeItem: 'Carb', username: '', password: '', carb: [], protein: [], fat: [], veg: [], type: 1, update: false,\r\n            dirty: false, updated: false\r\n        };\r\n    }\r\n\r\n    public componentDidMount() {\r\n        this.setState({ carb: this.props.meal.carb, protein: this.props.meal.protein, fat: this.props.meal.fat, veg: this.props.meal.fruits, type: this.props.meal.type });\r\n    }\r\n\r\n    handleItemClick = (e: any, { name }: any) => {\r\n        this.setState({ activeItem: name })\r\n    }\r\n\r\n    getMacroType = () => {\r\n        if (this.state.activeItem == 'Carb') {\r\n            return 1;\r\n        }\r\n        if (this.state.activeItem == 'Protein') {\r\n            return 2;\r\n        }\r\n        if (this.state.activeItem == 'Fat') {\r\n            return 3;\r\n        }\r\n\r\n        return 4;\r\n    }\r\n\r\n    getMeals = () => {\r\n        if (this.state.activeItem == 'Carb') {\r\n            return this.state.carb;\r\n        }\r\n        if (this.state.activeItem == 'Protein') {\r\n            return this.state.protein;\r\n        }\r\n        if (this.state.activeItem == 'Fat') {\r\n            return this.state.fat;\r\n        }\r\n\r\n        return this.state.veg;\r\n    }\r\n\r\n    render() {\r\n        const activeItem = this.state.activeItem;\r\n\r\n        if (this.state.type !== this.props.meal.type ) {\r\n            this.setState({ carb: this.props.meal.carb, protein: this.props.meal.protein, fat: this.props.meal.fat, type: this.props.meal.type, veg: this.props.meal.fruits});\r\n        }\r\n        else if (this.props.update !== this.state.dirty) {\r\n            this.setState({ updated: !this.state.updated })\r\n            this.setState({ carb: this.props.meal.carb, protein: this.props.meal.protein, fat: this.props.meal.fat, type: this.props.meal.type, veg: this.props.meal.fruits, dirty: this.props.update });\r\n        }\r\n\r\n        if (this.state.update === true) {\r\n            this.setState({ update: false });\r\n            this.props.updateParentCarb(this.state.type - 1, this.state.carb, this.state.protein, this.state.fat, this.state.veg);\r\n        }\r\n        \r\n        return (\r\n            <Grid>\r\n                <Grid.Column stretched width={3}>\r\n                    <Menu color='pink' fluid vertical text >\r\n                        <Menu.Item\r\n                            name='Carb'\r\n                            active={activeItem === 'Carb'}\r\n                            onClick={this.handleItemClick}\r\n                        />\r\n                        <Menu.Item\r\n                            name='Protein'\r\n                            active={activeItem === 'Protein'}\r\n                            onClick={this.handleItemClick}\r\n                        />\r\n                        <Menu.Item\r\n                            name='Fat'\r\n                            active={activeItem === 'Fat'}\r\n                            onClick={this.handleItemClick}\r\n                        />\r\n                        <Menu.Item\r\n                            name='Veg/Fruits'\r\n                            active={activeItem === 'Veg/Fruits'}\r\n                            onClick={this.handleItemClick}\r\n                        />\r\n                    </Menu>\r\n                </Grid.Column>\r\n                <Grid.Column stretched width={13}>\r\n                    <MacroTable update={this.state.updated} meals={this.getMeals()} updateMeals={this.updateMeals} macroType={this.state.activeItem} mealType={this.state.type} />\r\n                </Grid.Column>\r\n            </Grid>);\r\n    }\r\n}\r\n\r\nexport default connect()(MacroNew);","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Button, Form, Input, Grid, Label, Icon, Card, Header } from 'semantic-ui-react'\r\n\r\ninterface IProps {\r\n    meals: IMeal[];\r\n    guides: IMacroGuides;\r\n    update: boolean;\r\n}\r\n\r\ninterface IMacroGuides {\r\n    carb: number;\r\n    protein: number;\r\n    fat: number;\r\n    fruits: number;\r\n}\r\n\r\ninterface IMeal {\r\n    carb: IMealDetails[];\r\n    protein: IMealDetails[];\r\n    fat: IMealDetails[];\r\n    fruits: IMealDetails[];\r\n    type: number;\r\n}\r\n\r\ninterface IMealDetails {\r\n    macro: number;\r\n    mealDesc: string;\r\n    check: boolean;\r\n}\r\n\r\ninterface IState {\r\n    username: string;\r\n    password: string;\r\n    updated: boolean;\r\n}\r\n\r\nclass MacroHeader extends React.Component<IProps, IState> {\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            username: '', password: '', updated: false\r\n        };\r\n    }\r\n\r\n    getColour = (total: number) => {\r\n        if (total > 50.0 && total < 100) {\r\n            return 'orange';\r\n        }\r\n\r\n        if (total === 100) {\r\n            return 'teal';\r\n        }\r\n\r\n        if (total > 100.0) {\r\n            return 'red';\r\n        }\r\n\r\n        return 'black';\r\n    }\r\n\r\n    render() {\r\n\r\n        var divLabelStyle1 = {\r\n            color: '#fffafa',\r\n            fontFamily: 'Comic Sans MS',\r\n            backgroundColor: 'Green'\r\n        };\r\n\r\n        var divLabelStyle2 = {\r\n            color: '#0a0212',\r\n            fontFamily: 'Comic Sans MS',\r\n            backgroundColor: 'Yellow'\r\n        };\r\n\r\n        var divLabelStyle3 = {\r\n            color: '#fffafa',\r\n            fontFamily: 'Comic Sans MS',\r\n            backgroundColor: 'Red'\r\n        };\r\n\r\n        var divLabelStyle4 = {\r\n            color: '#fffafa',\r\n            fontFamily: 'Comic Sans MS',\r\n            fontSize: '20px'\r\n        };\r\n\r\n        var divLabelStyle5 = {\r\n            color: '#0a0212',\r\n            fontFamily: 'Comic Sans MS',\r\n            backgroundColor: 'White'\r\n        };\r\n\r\n        if (this.state.updated !== this.props.update)\r\n        {\r\n            console.log('updating total values');\r\n            this.setState({ updated: this.props.update });\r\n        }\r\n\r\n        const totalCarb = this.props.guides.carb - (this.props.meals.reduce(function (a, b) { return a + b.carb.reduce(function (a, b) { return a + parseFloat(b.macro.toString()); }, 0); }, 0));\r\n        const totalProtein = this.props.guides.protein - (this.props.meals.reduce(function (a, b) { return a + b.protein.reduce(function (a, b) { return a + parseFloat(b.macro.toString()); }, 0); }, 0));\r\n        const totalFat = this.props.guides.fat - (this.props.meals.reduce(function (a, b) { return a + b.fat.reduce(function (a, b) { return a + parseFloat(b.macro.toString()); }, 0); }, 0));\r\n        const totalVeg = this.props.guides.fruits - (this.props.meals.reduce(function (a, b) { return a + b.fruits.reduce(function (a, b) { return a + parseFloat(b.macro.toString()); }, 0); }, 0));\r\n\r\n        return (\r\n            <Grid centered>\r\n                <Grid.Row columns={1} color='pink' textAlign='center'>\r\n                    <a style={divLabelStyle4}>Total Remaining Macros</a>\r\n                </Grid.Row>\r\n                <Grid.Row columns={4} textAlign='center'>\r\n                    <Grid.Column color='black' textAlign='center'>\r\n                        <div><a>Carb(g)</a></div>\r\n                        <div style={divLabelStyle1}><a>{totalCarb.toFixed(2)}</a></div>\r\n                    </Grid.Column>\r\n                    <Grid.Column color='black' textAlign='center'>\r\n                        <div><a>Protein(g)</a></div>\r\n                        <div style={divLabelStyle2}><a>{totalProtein.toFixed(2)}</a></div>\r\n                    </Grid.Column>\r\n                    <Grid.Column color='black' textAlign='center'>\r\n                        <div><a>Fat(g)</a></div>\r\n                        <div style={divLabelStyle3}><a>{totalFat.toFixed(2)}</a></div>\r\n                    </Grid.Column>\r\n                    <Grid.Column color='black' textAlign='center'>\r\n                        <div><a>Serv</a></div>\r\n                        <div style={divLabelStyle5}><a>{totalVeg}</a></div>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            </Grid>);\r\n    }\r\n}\r\n\r\nexport default connect()(MacroHeader);","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Button, Icon, Input, Grid, Message, Header } from 'semantic-ui-react'\r\nimport ChartistGraph from 'react-chartist';\r\nimport MacroTable from './MacroTable'\r\n\r\ninterface IProps {\r\n    meals: IMeal[];\r\n    update: boolean;\r\n    guides: IMacroGuides;\r\n}\r\n\r\ninterface IMacroGuides {\r\n    carb: number;\r\n    protein: number;\r\n    fat: number;\r\n    fruits: number;\r\n}\r\n\r\ninterface IMeal {\r\n    carb: IMealDetails[];\r\n    protein: IMealDetails[];\r\n    fat: IMealDetails[];\r\n    fruits: IMealDetails[];\r\n    type: number;\r\n}\r\n\r\ninterface IMealDetails {\r\n    macro: number;\r\n    mealDesc: string;\r\n    check: boolean;\r\n}\r\n\r\ninterface IState {\r\n    meals: IMeal[];\r\n    dirty: boolean;\r\n}\r\n\r\nclass MacroModal extends React.Component<IProps, IState> {\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            dirty: false,\r\n            meals:[]\r\n        };\r\n    }\r\n\r\n    public componentDidMount() {\r\n        this.setState({ meals: this.props.meals });\r\n    }\r\n\r\n    getMealTypeString = (type: number) => {\r\n        if (type === 1) {\r\n            return 'Lunch';\r\n        }\r\n        if (type === 2) {\r\n            return 'Dinner';\r\n        }\r\n        if (type === 3) {\r\n            return 'Snack';\r\n        }\r\n\r\n        return 'Breakfast';\r\n    }\r\n\r\n    getCarbs = (mealType: number) => {\r\n        const meals: any[] = [];\r\n        this.props.meals[mealType].carb.forEach((item) => { meals.push(item.mealDesc + ' : ' + item.macro + 'g') });\r\n        return meals;\r\n    }\r\n\r\n    getProtein = (mealType: number) => {\r\n        const meals: any[] = [];\r\n        this.props.meals[mealType].protein.forEach((item) => { meals.push(item.mealDesc + ' : ' + item.macro + 'g') });\r\n        return meals;\r\n    }\r\n\r\n    getFat = (mealType: number) => {\r\n        const meals: any[] = [];\r\n        this.props.meals[mealType].fat.forEach((item) => { meals.push(item.mealDesc + ' : ' + item.macro + 'g') });\r\n        return meals;\r\n    }\r\n\r\n    getSnack = (mealType: number) => {\r\n        const meals: any[] = [];\r\n        this.props.meals[mealType].fruits.forEach((item) => { meals.push(item.mealDesc + ' : ' + item.macro + 'g') });\r\n        return meals;\r\n    }\r\n\r\n    getCarbHeader = (index: number) => {\r\n        var total = (this.props.meals[index].carb.reduce(function (a, b) { return a + parseFloat(b.macro.toString()); }, 0));\r\n        return 'Carbs: ' + total.toFixed(2) + 'g'\r\n    }\r\n\r\n    getProteinHeader = (index: number) => {\r\n        var total = (this.props.meals[index].protein.reduce(function (a, b) { return a + parseFloat(b.macro.toString()); }, 0));\r\n        return 'Protein: ' + total.toFixed(2) + 'g'\r\n    }\r\n\r\n    getFatHeader = (index: number) => {\r\n        var total = (this.props.meals[index].fat.reduce(function (a, b) { return a + parseFloat(b.macro.toString()); }, 0));\r\n        return 'Fat: ' + total.toFixed(2) + 'g'\r\n    }\r\n\r\n    getVegHeader = (index: number) => {\r\n        var total = (this.props.meals[index].fruits.reduce(function (a, b) { return a + parseFloat(b.macro.toString()); }, 0));\r\n        return 'Fruits/Veggis/Nuts: ' + total\r\n    }\r\n\r\n    getRows = () => {\r\n        return (\r\n            this.props.meals.map((item, index) =>\r\n                <div>\r\n                    <Header as='h3'>\r\n                        <Icon name='food' />\r\n                        <Header.Content>{this.getMealTypeString(index)}</Header.Content>\r\n                    </Header>\r\n                    <Message color='green' header={this.getCarbHeader(index)} list={this.getCarbs(index)} />\r\n                    <Message color='yellow' header={this.getProteinHeader(index)} list={this.getProtein(index)} />\r\n                    <Message color='red' header={this.getFatHeader(index)} list={this.getFat(index)} />\r\n                    <Message color='grey' header={this.getVegHeader(index)} list={this.getSnack(index)} />\r\n                    <div/>\r\n                </div>\r\n            ));\r\n    }\r\n\r\n    render() {\r\n\r\n        var divLabelStyle1 = {\r\n            color: '#fffafa',\r\n            fontFamily: 'Comic Sans MS',\r\n            backgroundColor: 'Green'\r\n        };\r\n\r\n        var divLabelStyle2 = {\r\n            color: '#0a0212',\r\n            fontFamily: 'Comic Sans MS',\r\n            backgroundColor: 'Yellow'\r\n        };\r\n\r\n        var divLabelStyle3 = {\r\n            color: '#fffafa',\r\n            fontFamily: 'Comic Sans MS',\r\n            backgroundColor: 'Red'\r\n        };\r\n\r\n        var divLabelStyle4 = {\r\n            color: '#fffafa',\r\n            fontFamily: 'Comic Sans MS',\r\n            fontSize: '20px'\r\n        };\r\n\r\n        var divLabelStyle5 = {\r\n            color: '#0a0212',\r\n            fontFamily: 'Comic Sans MS',\r\n            backgroundColor: 'White'\r\n        };\r\n\r\n        const consumedCarb = (this.props.meals.reduce(function (a, b) { return a + b.carb.reduce(function (a, b) { return a + parseFloat(b.macro.toString()); }, 0); }, 0));\r\n        const totalCarb = this.props.guides.carb - consumedCarb;\r\n\r\n        const consumedProtein = (this.props.meals.reduce(function (a, b) { return a + b.protein.reduce(function (a, b) { return a + parseFloat(b.macro.toString()); }, 0); }, 0));\r\n        const totalProtein = this.props.guides.protein - consumedProtein;\r\n\r\n        const consumedFat = (this.props.meals.reduce(function (a, b) { return a + b.fat.reduce(function (a, b) { return a + parseFloat(b.macro.toString()); }, 0); }, 0));\r\n        const totalFat = this.props.guides.fat - consumedFat;\r\n        const totalVeg = this.props.guides.fruits - (this.props.meals.reduce(function (a, b) { return a + b.fruits.reduce(function (a, b) { return a + parseFloat(b.macro.toString()); }, 0); }, 0));\r\n\r\n        var data = {\r\n            labels: ['Carb', 'Protein', 'Fat'],\r\n            series: [\r\n                [consumedCarb, consumedProtein, consumedFat]\r\n            ]\r\n        };\r\n\r\n        var type = 'Line'\r\n        var lineChartOptions = {\r\n            low: 0,\r\n            showArea: true\r\n        }\r\n\r\n        if (this.state.dirty !== this.props.update) {\r\n            this.setState({ meals: this.props.meals, dirty: this.props.update });\r\n        }\r\n\r\n        return (<div>\r\n            <Grid centered>\r\n                <Grid.Row columns={1} color='pink' textAlign='center'>\r\n                    <a style={divLabelStyle4}>Total Remaining Macros</a>\r\n                </Grid.Row>\r\n                <Grid.Row columns={4} textAlign='center'>\r\n                    <Grid.Column color='black' textAlign='center'>\r\n                        <div><a>Carb(g)</a></div>\r\n                        <div style={divLabelStyle1}><a>{totalCarb.toFixed(2)}</a></div>\r\n                    </Grid.Column>\r\n                    <Grid.Column color='black' textAlign='center'>\r\n                        <div><a>Protein(g)</a></div>\r\n                        <div style={divLabelStyle2}><a>{totalProtein.toFixed(2)}</a></div>\r\n                    </Grid.Column>\r\n                    <Grid.Column color='black' textAlign='center'>\r\n                        <div><a>Fat(g)</a></div>\r\n                        <div style={divLabelStyle3}><a>{totalFat.toFixed(2)}</a></div>\r\n                    </Grid.Column>\r\n                    <Grid.Column color='black' textAlign='center'>\r\n                        <div><a>Serv</a></div>\r\n                        <div style={divLabelStyle5}><a>{totalVeg}</a></div>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n                <Grid.Row>\r\n                    <Grid.Column>\r\n                        <div>\r\n                            <a>Total Macros Consumptions</a>\r\n                            <ChartistGraph data={data} type={type} />\r\n                        </div>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n                <Grid.Row>\r\n                    <Grid.Column>\r\n                        {this.getRows()}\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            </Grid>\r\n        </div>);\r\n    }\r\n}\r\n\r\nexport default connect()(MacroModal);","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Button, Segment, Grid, Menu, Label, Modal, Icon } from 'semantic-ui-react'\r\nimport { ApplicationState } from '../store';\r\nimport * as LoginStore from '../store/Login';\r\nimport SemanticDatepicker from 'react-semantic-ui-datepickers';\r\nimport 'react-semantic-ui-datepickers/dist/react-semantic-ui-datepickers.css';\r\nimport MacroNew from './MacroNew'\r\nimport MacroHeader from './MacroHeader'\r\nimport MacroModal from './MacroModal'\r\n\r\ninterface IProps {\r\n}\r\n\r\ninterface IState {\r\n    username: string;\r\n    password: string;\r\n    activeItem: string;\r\n    selectedDate: Date;\r\n    prevDate: Date;\r\n    guides: IMacroGuides;\r\n    clientDtos: IClientDto[];\r\n    macrosPlanDtos: IMacrosPlanDto[];\r\n    mealDtos: IMealDto[];\r\n    meals: IMeal[];\r\n    updated: boolean;\r\n    apiUpdate: boolean;\r\n    savingStatus: string;\r\n    dateChanged: boolean;\r\n    openReview: boolean;\r\n}\r\n\r\ninterface IMacroGuides {\r\n    carb: number;\r\n    protein: number;\r\n    fat: number;\r\n    fruits: number;\r\n}\r\n\r\ninterface ITotalDailyMacro {\r\n    carb: number;\r\n    protein: number;\r\n    fat: number;\r\n    fruits: number;\r\n}\r\n\r\ninterface IMeal {\r\n    carb: IMealDetails[];\r\n    protein: IMealDetails[];\r\n    fat: IMealDetails[];\r\n    fruits: IMealDetails[];\r\n    type: number;\r\n}\r\n\r\ninterface IMealDetails {\r\n    macro: number;\r\n    mealDesc: string;\r\n    check: boolean;\r\n}\r\n\r\ninterface IClientDto {\r\n    id: number,\r\n    lastName: string;\r\n    firstName: string;\r\n    address: string;\r\n    city: string;\r\n    age: number;\r\n    created: string;\r\n}\r\n\r\ninterface IMealDto {\r\n    id: number;\r\n    mealType: string;\r\n    macroType: string;\r\n    mealDesc: string;\r\n    macroValue: number;\r\n    updated: string;\r\n    created: string;\r\n    clientId: number;\r\n}\r\n\r\ninterface IMacrosPlanDto {\r\n    id: number,\r\n    height: number,\r\n    weight: number,\r\n    macroType: string;\r\n    activityLevel: string;\r\n    carbPercent: number,\r\n    proteinPercent: number,\r\n    fatPercent: number,\r\n    updated: string;\r\n    created: string;\r\n    clientId: number;\r\n}\r\n\r\n// At runtime, Redux will merge together...\r\ntype LoginProps =\r\n    IProps\r\n    & LoginStore.LoginState // ... state we've requested from the Redux store\r\n    & typeof LoginStore.actionCreators // ... plus action creators we've requested\r\n    & RouteComponentProps<{ username: string, password: string }>; // ... plus incoming routing parameters\r\n\r\nclass Meals extends React.Component<LoginProps, IState> {\r\n\r\n    public componentDidMount() {\r\n        this.props.getLogin();\r\n        var date = new Date();\r\n        date.setHours(0, 0, 0, 0);\r\n        this.setState({ selectedDate: date, prevDate: date });\r\n\r\n        if (this.props.logins.length > 0) {\r\n            //get client info\r\n            fetch('api/client?clientId=' + this.props.logins[0].clientId)\r\n                .then(response => response.json() as Promise<IClientDto[]>)\r\n                .then(data => this.setState({\r\n                    clientDtos: data, apiUpdate: true\r\n                })).catch(error => console.log(error));\r\n\r\n            //get macros plan\r\n            fetch('api/client/' + this.props.logins[0].clientId + '/macrosplan')\r\n                .then(response => response.json() as Promise<IMacrosPlanDto[]>)\r\n                .then(data => this.setState({\r\n                    macrosPlanDtos: data, apiUpdate: true\r\n                })).catch(error => console.log(error));\r\n\r\n            //get all meals\r\n            fetch('api/tracker/' + this.props.logins[0].clientId + '/meals?date=' + date.toISOString())\r\n                .then(response => response.json() as Promise<IMealDto[]>)\r\n                .then(data => this.setState({\r\n                    mealDtos: data, apiUpdate: true\r\n                })).catch(error => console.log(error));\r\n        }\r\n    }\r\n\r\n    onSubmit = () => {\r\n        this.setState({ username: '', password: '' });\r\n    }\r\n\r\n    updateInput = (event: any) => {\r\n        this.setState({ username: event.target.value });\r\n        console.log(event.target.value);\r\n    }\r\n\r\n    updateInput2 = (event: any) => {\r\n        this.setState({ password: event.target.value });\r\n        console.log(event.target.value);\r\n    }\r\n\r\n    updateParentCarb = (mealType: number, carb: IMealDetails[], protein: IMealDetails[], fat: IMealDetails[], veg: IMealDetails[]) => {\r\n        this.state.meals[mealType].carb = carb;\r\n        this.state.meals[mealType].protein = protein;\r\n        this.state.meals[mealType].fat = fat;\r\n        this.state.meals[mealType].fruits = veg;\r\n        this.setState({ updated: !this.state.updated });\r\n        this.setState({ savingStatus: 'Not Saved' })\r\n    }\r\n\r\n    constructor(props: LoginProps) {\r\n        super(props);\r\n        this.updateParentCarb = this.updateParentCarb.bind(this);\r\n        this.state = {\r\n            username: '', password: '', activeItem: 'Breakfast',\r\n            selectedDate: new Date(),\r\n            prevDate: new Date(),\r\n            guides: { carb: 0, protein: 0, fat: 0, fruits: 0 },\r\n            meals: [{ carb: [], protein: [], fat: [], fruits: [], type: 1 },\r\n                { carb: [], protein: [], fat: [], fruits: [], type: 2 },\r\n                { carb: [], protein: [], fat: [], fruits: [], type: 3 },\r\n                { carb: [], protein: [], fat: [], fruits: [], type: 4 }],\r\n            updated: false,\r\n            clientDtos: [],\r\n            macrosPlanDtos: [],\r\n            mealDtos: [],\r\n            apiUpdate: false,\r\n            savingStatus: 'Saved',\r\n            dateChanged: false,\r\n            openReview: false,\r\n        };\r\n    }\r\n\r\n    handleItemClick = (e: any, { name }: any) => this.setState({ activeItem: name })\r\n\r\n    mealTypeDict = { 'Breakfast': 0, 'Lunch': 1, 'Dinner': 2, 'Snack': 3 };\r\n\r\n    getMealType = (type:string) =>\r\n    {\r\n        if (type == 'Lunch') {\r\n            return 1;\r\n        }\r\n        if (type == 'Dinner') {\r\n            return 2;\r\n        }\r\n        if (type == 'Snack') {\r\n            return 3;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    getMealTypeString = (type: number) => {\r\n        if (type === 1) {\r\n            return 'Lunch';\r\n        }\r\n        if (type === 2) {\r\n            return 'Dinner';\r\n        }\r\n        if (type === 3) {\r\n            return 'Snack';\r\n        }\r\n\r\n        return 'Breakfast';\r\n    }\r\n\r\n    getActivityLevel = (activityLevel: string) => {\r\n        if (activityLevel == 'Sedentary') {\r\n            return 1.2;\r\n        }\r\n\r\n        if (activityLevel == 'Lightly Active') {\r\n            return 1.375;\r\n        }\r\n\r\n        if (activityLevel == 'Moderately Active') {\r\n            return 1.55;\r\n        }\r\n\r\n        if (activityLevel == 'Very Active') {\r\n            return 1.725;\r\n        }\r\n\r\n        if (activityLevel == 'Extra Active') {\r\n            return 1.9;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    setMacroGuides = () => {\r\n        if (this.state.macrosPlanDtos.length > 0 && this.state.clientDtos.length > 0) {\r\n            const client = this.state.clientDtos[0];\r\n            const macrosPlan = this.state.macrosPlanDtos[0];\r\n            const bmr = (10 * macrosPlan.weight) + (6.25 * macrosPlan.height) - (5 * client.age) - 161;\r\n            const totalCalories = this.getActivityLevel(macrosPlan.activityLevel) * bmr;\r\n            const carb = ((macrosPlan.carbPercent / 100.0 * totalCalories) / 4).toFixed(2);\r\n            const protein = ((macrosPlan.proteinPercent / 100.0 * totalCalories) / 4).toFixed(2);\r\n            const fat = ((macrosPlan.fatPercent / 100.0 * totalCalories) / 9).toFixed(2);\r\n\r\n            this.state.guides.carb = parseFloat(carb);\r\n            this.state.guides.protein = parseFloat(protein);\r\n            this.state.guides.fat = parseFloat(fat);\r\n            this.state.guides.fruits = 4;\r\n            this.setState({ guides: this.state.guides });\r\n        }\r\n    }\r\n\r\n    setMeals = () => {\r\n        if (this.state.mealDtos.length > 0) {\r\n\r\n            var totalMeals = 0;\r\n            this.state.meals.map((item) => {\r\n                totalMeals += item.carb.length;\r\n                totalMeals += item.protein.length;\r\n                totalMeals += item.fat.length;\r\n                totalMeals += item.fruits.length;\r\n            });\r\n\r\n            if (totalMeals === this.state.mealDtos.length) {\r\n                return;\r\n            }\r\n\r\n            this.state.mealDtos.forEach(meal => {\r\n                if (meal.macroType === 'carb') {\r\n                    console.log(meal);\r\n                    this.state.meals[this.getMealType(meal.mealType)].carb.push({ mealDesc: meal.mealDesc, macro: meal.macroValue, check: false });\r\n                }\r\n                else if (meal.macroType === 'protein') {\r\n                    this.state.meals[this.getMealType(meal.mealType)].protein.push({ mealDesc: meal.mealDesc, macro: meal.macroValue, check: false });\r\n                }\r\n                else if (meal.macroType === 'fat') {\r\n                    this.state.meals[this.getMealType(meal.mealType)].fat.push({ mealDesc: meal.mealDesc, macro: meal.macroValue, check: false });\r\n                }\r\n                else if (meal.macroType === 'fruits') {\r\n                    this.state.meals[this.getMealType(meal.mealType)].fruits.push({ mealDesc: meal.mealDesc, macro: meal.macroValue, check: false });\r\n                }\r\n            })\r\n\r\n            this.setState({ meals: this.state.meals });\r\n        }\r\n    }\r\n\r\n    saveCarb = (mealType: number) => {\r\n        if (this.state.meals[mealType].carb.length < 1) {\r\n            this.setState({ savingStatus: 'Saved' })\r\n            return;\r\n        }\r\n\r\n        this.setState({ savingStatus: 'Saving in progress' })\r\n        var fetchStr = 'api/tracker/meal?date=' + this.state.selectedDate.toISOString();\r\n\r\n        this.state.meals[mealType].carb.forEach(macro => {\r\n            fetch(fetchStr, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    Id: 0,\r\n                    MealType: this.getMealTypeString(mealType),\r\n                    MacroType: 'carb',\r\n                    MealDesc: macro.mealDesc,\r\n                    MacroValue: parseFloat(macro.macro.toString()),\r\n                    Updated: new Date(),\r\n                    Created: this.state.selectedDate.toISOString(),\r\n                    ClientId: this.props.logins[0].clientId,\r\n                })\r\n            }).then(response => response.json()).then(data => this.setState({ savingStatus: 'Saved' })).catch(error => console.log('put macros ---------->' + error));\r\n        });\r\n    }\r\n\r\n    saveProtein = (mealType: number) => {\r\n        if (this.state.meals[mealType].protein.length < 1) {\r\n            this.setState({ savingStatus: 'Saved' })\r\n            return;\r\n        }\r\n\r\n        this.setState({ savingStatus: 'Saving in progress' })\r\n        var fetchStr = 'api/tracker/meal?date=' + this.state.selectedDate.toISOString();\r\n\r\n        this.state.meals[mealType].protein.forEach(macro => {\r\n            fetch(fetchStr, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    Id: 0,\r\n                    MealType: this.getMealTypeString(mealType),\r\n                    MacroType: 'protein',\r\n                    MealDesc: macro.mealDesc,\r\n                    MacroValue: parseFloat(macro.macro.toString()),\r\n                    Updated: new Date(),\r\n                    Created: this.state.selectedDate.toISOString(),\r\n                    ClientId: this.props.logins[0].clientId,\r\n                })\r\n            }).then(response => response.json()).then(data => this.setState({ savingStatus: 'Saved' })).catch(error => console.log('put macros ---------->' + error));\r\n        });\r\n    }\r\n\r\n    saveFat = (mealType: number) => {\r\n        if (this.state.meals[mealType].fat.length < 1) {\r\n            this.setState({ savingStatus: 'Saved' })\r\n            return;\r\n        }\r\n\r\n        this.setState({ savingStatus: 'Saving in progress' })\r\n        var fetchStr = 'api/tracker/meal?date=' + this.state.selectedDate.toISOString();\r\n\r\n        this.state.meals[mealType].fat.forEach(macro => {\r\n            fetch(fetchStr, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    Id: 0,\r\n                    MealType: this.getMealTypeString(mealType),\r\n                    MacroType: 'fat',\r\n                    MealDesc: macro.mealDesc,\r\n                    MacroValue: parseFloat(macro.macro.toString()),\r\n                    Updated: new Date(),\r\n                    Created: this.state.selectedDate.toISOString(),\r\n                    ClientId: this.props.logins[0].clientId,\r\n                })\r\n            }).then(response => response.json()).then(data => this.setState({ savingStatus: 'Saved' })).catch(error => console.log('put macros ---------->' + error));\r\n        });\r\n    }\r\n\r\n    saveFruits = (mealType: number) => {\r\n        if (this.state.meals[mealType].fruits.length < 1) {\r\n            this.setState({ savingStatus: 'Saved' })\r\n            return;\r\n        }\r\n\r\n        this.setState({ savingStatus: 'Saving in progress' })\r\n        var fetchStr = 'api/tracker/meal?date=' + this.state.selectedDate.toISOString();\r\n\r\n        this.state.meals[mealType].fruits.forEach(macro => {\r\n            fetch(fetchStr, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    Id: 0,\r\n                    MealType: this.getMealTypeString(mealType),\r\n                    MacroType: 'fruits',\r\n                    MealDesc: macro.mealDesc,\r\n                    MacroValue: parseFloat(macro.macro.toString()),\r\n                    Updated: new Date(),\r\n                    Created: this.state.selectedDate.toISOString(),\r\n                    ClientId: this.props.logins[0].clientId,\r\n                })\r\n            }).then(response => response.json()).then(data => this.setState({ savingStatus: 'Saved' })).catch(error => console.log('put macros ---------->' + error));\r\n        });\r\n    }\r\n\r\n    deleteMeals = () => {\r\n        this.setState({ savingStatus: 'Saving in progress' })\r\n        var fetchStr = 'api/tracker/' + this.props.logins[0].clientId + '/meal/delete?date=' + this.state.selectedDate.toISOString();\r\n        fetch(fetchStr, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n            }\r\n        }).then(response => response.json()).then(data => this.setState({ savingStatus: 'Saving in progress' })).catch(error => console.log('delete meals---------->' + error));\r\n    }\r\n\r\n    onSave = () => {\r\n        // delete rows\r\n        this.deleteMeals();\r\n\r\n        // add rows\r\n        setTimeout(() => {\r\n            for (let i = 0; i < 4; i++) {\r\n                this.saveCarb(i);\r\n                this.saveProtein(i);\r\n                this.saveFat(i);\r\n                this.saveFruits(i);\r\n            }\r\n        }, 2000);\r\n    }\r\n\r\n    getMeals = () => {\r\n        fetch('api/tracker/' + this.props.logins[0].clientId + '/meals?date=' + this.state.selectedDate.toISOString())\r\n            .then(response => response.json() as Promise<IMealDto[]>)\r\n            .then(data => this.setState({\r\n                mealDtos: data, apiUpdate: true\r\n            })).catch(error => console.log(error));\r\n    }\r\n\r\n    resetMeals = () => {\r\n        this.setState({\r\n            meals: [{ carb: [], protein: [], fat: [], fruits: [], type: 1 },\r\n            { carb: [], protein: [], fat: [], fruits: [], type: 2 },\r\n            { carb: [], protein: [], fat: [], fruits: [], type: 3 },\r\n            { carb: [], protein: [], fat: [], fruits: [], type: 4 }] });\r\n    }\r\n\r\n    handleDateChange = (event: any, field: any) => {\r\n        var newDate = new Date(field['value']);\r\n        var dayDiff = Math.abs((this.state.prevDate.getTime() - newDate.getTime()) / (1000 * 3600 * 24));\r\n        if (dayDiff < 356) {\r\n            this.setState({ prevDate: this.state.selectedDate });\r\n            this.setState({ selectedDate: new Date(field['value']), mealDtos: [], dateChanged: true, apiUpdate: true })\r\n        }\r\n    }\r\n\r\n    handleOpen = (open: boolean) => {\r\n        this.setState({ openReview: open });\r\n    }\r\n\r\n    getColour = () => {\r\n        if (this.state.savingStatus === 'Not Saved') {\r\n            return 'red';\r\n        }\r\n\r\n        return 'green';\r\n    }\r\n\r\n    render() {\r\n        var divLabelStyle = {\r\n            color: '#fffafa',\r\n            backgroundColor: this.getColour()\r\n        };\r\n\r\n        const activeItem = this.state.activeItem;\r\n        console.log(this.state.meals);\r\n        if (this.props.logins.length > 0) {\r\n            if (this.state.dateChanged === true) {\r\n                this.setState({ dateChanged: false });\r\n                this.resetMeals();\r\n                this.getMeals();\r\n            }\r\n\r\n            if (this.state.apiUpdate === true) {\r\n                this.setState({ apiUpdate: false, updated: !this.state.updated });\r\n                this.setMacroGuides();\r\n                this.setMeals();\r\n            }\r\n            return (\r\n                <div>\r\n                    <Grid centered>\r\n                        <Grid.Row columns={2}>\r\n                            <Grid.Column verticalAlign='middle' floated='left' textAlign='left'>\r\n                                <Label size='large' as='a' color='pink' basic circular>Daily Meals Tracker</Label>\r\n                            </Grid.Column>\r\n                            <Grid.Column verticalAlign='middle' floated='right' textAlign='right'>\r\n                                <SemanticDatepicker value={this.state.selectedDate} date={new Date()} onChange={this.handleDateChange} showToday />\r\n                            </Grid.Column>\r\n                        </Grid.Row>\r\n                        <Grid.Row>\r\n                            <Grid.Column>\r\n                                <Segment textAlign='center' attached='bottom'>\r\n                                    <MacroHeader meals={this.state.meals} guides={this.state.guides} update={this.state.updated} />\r\n                                </Segment>\r\n                            </Grid.Column>\r\n                        </Grid.Row>\r\n                        <Grid.Row>\r\n                            <Grid.Column width={16}>\r\n                                <Menu attached='top' tabular compact>\r\n                                    <Menu.Item\r\n                                        name='Breakfast'\r\n                                        active={activeItem === 'Breakfast'}\r\n                                        onClick={this.handleItemClick}\r\n                                    />\r\n                                    <Menu.Item\r\n                                        name='Lunch'\r\n                                        active={activeItem === 'Lunch'}\r\n                                        onClick={this.handleItemClick}\r\n                                    />\r\n                                    <Menu.Item\r\n                                        name='Dinner'\r\n                                        active={activeItem === 'Dinner'}\r\n                                        onClick={this.handleItemClick}\r\n                                    />\r\n                                    <Menu.Item\r\n                                        name='Snack'\r\n                                        active={activeItem === 'Snack'}\r\n                                        onClick={this.handleItemClick}\r\n                                    />\r\n                                </Menu>\r\n\r\n                                <Segment attached='bottom'>\r\n                                    <MacroNew updateParentCarb={this.updateParentCarb} meal={this.state.meals[this.getMealType(activeItem)]} guides={this.state.guides} update={this.state.updated} />\r\n                                </Segment>\r\n                            </Grid.Column>\r\n                        </Grid.Row>\r\n                        <Grid.Row>\r\n                            <Grid.Column verticalAlign='middle' width={16} textAlign='center' floated='left'>\r\n                                <div style={divLabelStyle}>\r\n                                    <a>{this.state.savingStatus}</a>\r\n                                </div>\r\n                            </Grid.Column>\r\n                        </Grid.Row>\r\n                        <Grid.Row columns={3}>\r\n                            <Grid.Column width={4} textAlign='left' floated='left'>\r\n                                <Button floated='left' size='tiny' secondary>Cancel</Button>\r\n                            </Grid.Column>\r\n                            <Grid.Column width={4} textAlign='left' floated='left'>\r\n                                <Button floated='left' size='tiny' onClick={this.onSave} primary>Save</Button>\r\n                            </Grid.Column>\r\n                            <Grid.Column verticalAlign='middle' width={4} textAlign='left' floated='left'>\r\n                            </Grid.Column>\r\n                            <Grid.Column width={4} textAlign='right' floated='right'>\r\n                                <Modal\r\n                                    open={this.state.openReview}\r\n                                    onClose={() => this.handleOpen(false)}\r\n                                    onOpen={() => this.handleOpen(true)}\r\n                                    trigger={<Button size='tiny' primary>Review</Button>}>\r\n                                    <Modal.Header>Meals Summary for {this.state.selectedDate.toLocaleDateString()}</Modal.Header>\r\n                                    <Modal.Content scrolling>\r\n                                        <Modal.Description>\r\n                                            <MacroModal guides={this.state.guides} meals={this.state.meals} update={this.state.updated} />\r\n                                        </Modal.Description>\r\n                                    </Modal.Content>\r\n                                    <Modal.Actions>\r\n                                        <Button size='tiny' onClick={() => this.handleOpen(false)} primary>\r\n                                            Close <Icon name='chevron right' />\r\n                                        </Button>\r\n                                    </Modal.Actions>\r\n                                </Modal>\r\n                            </Grid.Column>\r\n                        </Grid.Row>\r\n                    </Grid>\r\n                </div>);\r\n        }\r\n        return (<Redirect to=\"/\" />);\r\n    }\r\n\r\n    private getLoginCredentials = () => {\r\n        this.props.requestLogins(this.state.username, this.state.password);\r\n    }\r\n\r\n    private clearCredentials = () => {\r\n        this.props.requestLogout(this.state.username, this.state.password);\r\n    }\r\n}\r\n\r\n//export default connect()(Home);\r\nexport default connect(\r\n    (state: ApplicationState) => state.logins, // Selects which state properties are merged into the component's props\r\n    LoginStore.actionCreators // Selects which action creators are merged into the component's props\r\n)(Meals as any);","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Button, Label, Input, Grid, Icon, Menu, Segment, GridColumn } from 'semantic-ui-react'\r\nimport { isNullOrUndefined, isNull } from 'util';\r\n\r\ninterface IProps {\r\n    meal: IMeal,\r\n    guides: IMacroGuides,\r\n    updateParentCarb: Function\r\n}\r\n\r\ninterface IMeal {\r\n    carb: number;\r\n    protein: number;\r\n    fat: number;\r\n    fruits: number;\r\n    carbDesc: string;\r\n    proteinDesc: string;\r\n    fatDesc: string;\r\n    fruitsDesc: string;\r\n    type: number;\r\n}\r\n\r\ninterface IMacroGuides {\r\n    carb: number;\r\n    protein: number;\r\n    fat: number;\r\n    fruits: number;\r\n}\r\n\r\ninterface IState {\r\n    activeItem: string;\r\n    username: string;\r\n    password: string;\r\n    carb: number;\r\n    protein: number;\r\n    fat: number;\r\n    veg: number;\r\n    type: number;\r\n}\r\n\r\nclass Macro extends React.Component<IProps, IState> {\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            activeItem: 'carb', username: '', password: '', carb: 0, protein: 0, fat: 0, veg:0, type: 1\r\n        };\r\n    }\r\n\r\n    public componentDidMount() {\r\n        this.setState({ carb: this.props.meal.carb, protein: this.props.meal.protein, fat: this.props.meal.fat, veg: 0, type: this.props.meal.type });\r\n    }\r\n\r\n    updateCarb = (event: any) => {\r\n        if (isNaN(parseFloat(event.target.value))) {\r\n            this.setState({ carb: 0 });\r\n            this.props.updateParentCarb(this.state.type - 1, this.state.carb, this.state.protein, this.state.fat, this.state.veg)\r\n            return;\r\n        }\r\n\r\n        this.setState({ carb: parseFloat(event.target.value) });\r\n        this.props.updateParentCarb(this.state.type - 1, this.state.carb, this.state.protein, this.state.fat, this.state.veg)\r\n    }\r\n\r\n    addCarb = (event: any) => {\r\n        this.setState({ carb: this.state.carb + 1 });\r\n        this.props.updateParentCarb(this.state.type - 1, this.state.carb, this.state.protein, this.state.fat, this.state.veg)\r\n    }\r\n\r\n    minusCarb = (event: any) => {\r\n        if (this.state.carb > 0) {\r\n            this.setState({ carb: this.state.carb - 1 });\r\n            this.props.updateParentCarb(this.state.type - 1, this.state.carb, this.state.protein, this.state.fat, this.state.veg)\r\n        }\r\n    }\r\n\r\n    addProtein = (event: any) => {\r\n        this.setState({ protein: this.state.protein + 1 });\r\n        this.props.updateParentCarb(this.state.type - 1, this.state.carb, this.state.protein, this.state.fat, this.state.veg)\r\n    }\r\n\r\n    minusProtein = (event: any) => {\r\n        if (this.state.protein > 0) {\r\n            this.setState({ protein: this.state.protein - 1 });\r\n            this.props.updateParentCarb(this.state.type - 1, this.state.carb, this.state.protein, this.state.fat, this.state.veg)\r\n        }\r\n    }\r\n\r\n    addFat = (event: any) => {\r\n        this.setState({ fat: this.state.fat + 1 });\r\n        this.props.updateParentCarb(this.state.type - 1, this.state.carb, this.state.protein, this.state.fat, this.state.veg)\r\n    }\r\n\r\n    minusFat = (event: any) => {\r\n        if (this.state.fat > 0) {\r\n            this.setState({ fat: this.state.fat - 1 });\r\n            this.props.updateParentCarb(this.state.type - 1, this.state.carb, this.state.protein, this.state.fat, this.state.veg)\r\n        }\r\n    }\r\n\r\n    addVeg = (event: any) => {\r\n        this.setState({ veg: this.state.veg + 1 });\r\n        this.props.updateParentCarb(this.state.type - 1, this.state.carb, this.state.protein, this.state.fat, this.state.veg)\r\n    }\r\n\r\n    minusVeg = (event: any) => {\r\n        if (this.state.veg > 0) {\r\n            this.setState({ veg: this.state.veg - 1 });\r\n            this.props.updateParentCarb(this.state.type - 1, this.state.carb, this.state.protein, this.state.fat, this.state.veg)\r\n        }\r\n    }\r\n\r\n    updateVeg = (event: any) => {\r\n        if (isNaN(parseFloat(event.target.value))) {\r\n            this.setState({ veg: 0 });\r\n            this.props.updateParentCarb(this.state.type - 1, this.state.carb, this.state.protein, this.state.fat, this.state.veg)\r\n            return;\r\n        }\r\n\r\n        this.setState({ veg: parseInt(event.target.value) });\r\n        this.props.updateParentCarb(this.state.type - 1, this.state.carb, this.state.protein, this.state.fat, this.state.veg)\r\n    }\r\n\r\n    updateProtein = (event: any) => {\r\n        if (isNaN(parseFloat(event.target.value))) {\r\n            this.setState({ protein: 0 });\r\n            this.props.updateParentCarb(this.state.type - 1, this.state.carb, this.state.protein, this.state.fat, this.state.veg)\r\n            return;\r\n        }\r\n\r\n        this.setState({ protein: parseFloat(event.target.value) });\r\n        this.props.updateParentCarb(this.state.type - 1, this.state.carb, this.state.protein, this.state.fat, this.state.veg)\r\n    }\r\n\r\n    updateFat = (event: any) => {\r\n        if (isNaN(parseFloat(event.target.value))) {\r\n            this.setState({ fat: 0 });\r\n            this.props.updateParentCarb(this.state.type - 1, this.state.carb, this.state.protein, this.state.fat, this.state.veg)\r\n            return;\r\n        }\r\n\r\n        this.setState({ fat: parseFloat(event.target.value) });\r\n        this.props.updateParentCarb(this.state.type - 1, this.state.carb, this.state.protein, this.state.fat, this.state.veg)\r\n    }\r\n\r\n    updateMeal = (event: any) => {\r\n        //this.setState({ fat: event.target.value });\r\n        //console.log(event.target.value);\r\n    }\r\n\r\n    getColour = (total: number) => {\r\n        if (total > 50.0 && total < 100) {\r\n            return 'orange';\r\n        }\r\n\r\n        if (total === 100) {\r\n            return 'teal';\r\n        }\r\n\r\n        if (total > 100.0) {\r\n            return 'red';\r\n        }\r\n\r\n        return 'grey';\r\n    }\r\n\r\n    handleItemClick = (e: any, { name }: any) => this.setState({ activeItem: name })\r\n\r\n//    <Grid.Row columns={4} stretched>\r\n//    <Grid.Column width={2} verticalAlign='middle' textAlign='center'>\r\n//        <h5>C</h5>\r\n//    </Grid.Column>\r\n//    <Grid.Column width={8}>\r\n//        <Input size='mini' placeholder='Descriptions' />\r\n//    </Grid.Column>\r\n//    <Grid.Column width={4}>\r\n//        <Input size='mini' placeholder='Macro' value={this.state.carb} onChange={this.updateCarb} />\r\n//    </Grid.Column>\r\n//    <Grid.Column width={2} as='div' textAlign='center'>\r\n//        <div>\r\n//            <Button size='tiny' onClick={this.addCarb} inverted icon>\r\n//                <Icon name='plus' color='black' />\r\n//            </Button>\r\n//            <Button size='tiny' onClick={this.minusCarb} inverted icon>\r\n//                <Icon name='minus' color='black' />\r\n//            </Button>\r\n//        </div>\r\n//    </Grid.Column>\r\n//</Grid.Row>\r\n//    <Grid.Row columns={4} stretched>\r\n//        <Grid.Column width={2} textAlign='center' verticalAlign='middle'>\r\n//            <h5>P</h5>\r\n//        </Grid.Column>\r\n//        <Grid.Column width={8}>\r\n//            <Input size='mini' placeholder='Descriptions' />\r\n//        </Grid.Column>\r\n//        <Grid.Column width={4}>\r\n//            <Input size='mini' placeholder='Macro' value={this.state.protein} onChange={this.updateProtein} />\r\n//        </Grid.Column>\r\n//        <Grid.Column width={2} as='div' textAlign='center'>\r\n//            <div>\r\n//                <Button size='tiny' onClick={this.addProtein} inverted icon>\r\n//                    <Icon name='add' color='black' />\r\n//                </Button>\r\n//                <Button size='tiny' onClick={this.minusProtein} inverted icon>\r\n//                    <Icon name='minus' color='black' />\r\n//                </Button>\r\n//            </div>\r\n//        </Grid.Column>\r\n//    </Grid.Row>\r\n//    <Grid.Row columns={4} stretched>\r\n//        <Grid.Column width={2} verticalAlign='middle' textAlign='center'>\r\n//            <h5>F</h5>\r\n//        </Grid.Column>\r\n//        <Grid.Column width={8}>\r\n//            <Input size='small' placeholder='Descriptions' />\r\n//        </Grid.Column>\r\n//        <Grid.Column width={4}>\r\n//            <Input size='mini' placeholder='Macro' value={this.state.fat} onChange={this.updateFat} />\r\n//        </Grid.Column>\r\n//        <Grid.Column width={2} as='div' textAlign='center'>\r\n//            <div>\r\n//                <Button size='tiny' onClick={this.addFat} inverted icon>\r\n//                    <Icon name='add' color='black' />\r\n//                </Button>\r\n//                <Button size='tiny' onClick={this.minusFat} inverted icon>\r\n//                    <Icon name='minus' color='black' />\r\n//                </Button>\r\n//            </div>\r\n//        </Grid.Column>\r\n//    </Grid.Row>\r\n//    <Grid.Row columns={4} stretched>\r\n//        <Grid.Column width={2} as='div' verticalAlign='middle' textAlign='center'>\r\n//            <div>\r\n//                <h5>V</h5>\r\n//            </div>\r\n//        </Grid.Column>\r\n//        <Grid.Column width={8}>\r\n//            <Input size='small' placeholder='Descriptions' />\r\n//        </Grid.Column>\r\n//        <Grid.Column width={4}>\r\n//            <Input size='mini' placeholder='Macro' value={this.state.veg} onChange={this.updateVeg} />\r\n//        </Grid.Column>\r\n//        <Grid.Column width={2} as='div' textAlign='center'>\r\n//            <div>\r\n//                <Button size='tiny' onClick={this.addVeg} inverted icon>\r\n//                    <Icon name='add' color='black' />\r\n//                </Button>\r\n//                <Button size='tiny' onClick={this.minusVeg} inverted icon>\r\n//                    <Icon name='minus' color='black' />\r\n//                </Button>\r\n//            </div>\r\n//        </Grid.Column>\r\n//    </Grid.Row>\r\n\r\n    render() {\r\n        const activeItem = this.state.activeItem;\r\n\r\n        if (this.state.type !== this.props.meal.type)\r\n        {\r\n            this.setState({ carb: this.props.meal.carb, protein: this.props.meal.protein, fat: this.props.meal.fat, type: this.props.meal.type, veg: this.props.meal.fruits });\r\n        }\r\n\r\n        this.props.updateParentCarb(this.state.type - 1, this.state.carb, this.state.protein, this.state.fat, this.state.veg);\r\n\r\n        return (\r\n            <Grid>\r\n                <Grid.Column stretched width={4}>\r\n                    <Menu color='pink' fluid vertical pointing >\r\n                        <Menu.Item\r\n                            name='Carb'\r\n                            active={activeItem === 'Carb'}\r\n                            onClick={this.handleItemClick}\r\n                        />\r\n                        <Menu.Item\r\n                            name='Protein'\r\n                            active={activeItem === 'Protein'}\r\n                            onClick={this.handleItemClick}\r\n                        />\r\n                        <Menu.Item\r\n                            name='Fat'\r\n                            active={activeItem === 'Fat'}\r\n                            onClick={this.handleItemClick}\r\n                        />\r\n                        <Menu.Item\r\n                            name='Veg'\r\n                            active={activeItem === 'Veg'}\r\n                            onClick={this.handleItemClick}\r\n                        />\r\n                    </Menu>\r\n                </Grid.Column>\r\n                <Grid.Column stretched width={12}>\r\n                </Grid.Column>\r\n            </Grid>);\r\n    }\r\n}\r\n\r\nexport default connect()(Macro);","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Button, Form, Input, Grid, Image } from 'semantic-ui-react'\r\nimport { InputGroupButtonDropdown } from 'reactstrap';\r\n\r\ninterface IProps {\r\n    measurements: IMeasurements;\r\n    update: boolean;\r\n    type: string;\r\n    updateMeasurements: Function;\r\n}\r\n\r\ninterface IMeasurements {\r\n    neck: number;\r\n    upperArm: number;\r\n    waist: number;\r\n    hips: number;\r\n    thigh: number;\r\n    chest: number;\r\n    weight: number;\r\n}\r\n\r\ninterface IState {\r\n    username: string;\r\n    password: string;\r\n    updated: boolean;\r\n    neck: number;\r\n    upperArm: number;\r\n    waist: number;\r\n    hips: number;\r\n    thigh: number;\r\n    chest: number;\r\n    weight: number;\r\n    bodyfat: number;\r\n    selected: number;\r\n    dirty: boolean;\r\n}\r\n\r\nclass MeasurementsTable extends React.Component<IProps, IState> {\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            username: '', password: '', updated: false, neck: 0.0, upperArm:0.0, waist: 0.0,\r\n            hips: 0.0, thigh: 0.0, chest: 0.0, weight: 0.0, bodyfat: 0.0,\r\n            selected: 0, dirty: false\r\n        };\r\n    }\r\n\r\n    public componentDidMount() {\r\n        this.setState({\r\n            neck: this.props.measurements.neck,\r\n            waist: this.props.measurements.waist,\r\n            hips: this.props.measurements.hips,\r\n            thigh: this.props.measurements.thigh,\r\n            chest: this.props.measurements.chest,\r\n            weight: this.props.measurements.weight\r\n        });\r\n    }\r\n\r\n    getColour = (total: number) => {\r\n        if (total > 50.0 && total < 100) {\r\n            return 'orange';\r\n        }\r\n\r\n        if (total === 100) {\r\n            return 'teal';\r\n        }\r\n\r\n        if (total > 100.0) {\r\n            return 'red';\r\n        }\r\n\r\n        return 'black';\r\n    }\r\n\r\n    updateNeck = (event: any) => {\r\n        const re = /^[-+,0-9,\\.]+$/;\r\n        if (event.target.value === '' || re.test(event.target.value)) {\r\n            this.setState({ neck: event.target.value, updated: true });\r\n        }\r\n    }\r\n\r\n    updateUpperArm = (event: any) => {\r\n        const re = /^[-+,0-9,\\.]+$/;\r\n        if (event.target.value === '' || re.test(event.target.value)) {\r\n            this.setState({ upperArm: event.target.value, updated: true });\r\n        }\r\n    }\r\n\r\n    updateWaist = (event: any) => {\r\n        const re = /^[-+,0-9,\\.]+$/;\r\n        if (event.target.value === '' || re.test(event.target.value)) {\r\n            this.setState({ waist: event.target.value, updated: true });\r\n        }\r\n    }\r\n\r\n    updateHips = (event: any) => {\r\n        const re = /^[-+,0-9,\\.]+$/;\r\n        if (event.target.value === '' || re.test(event.target.value)) {\r\n            this.setState({ hips: event.target.value, updated: true });\r\n        }\r\n    }\r\n\r\n    updateThigh = (event: any) => {\r\n        const re = /^[-+,0-9,\\.]+$/;\r\n        if (event.target.value === '' || re.test(event.target.value)) {\r\n            this.setState({ thigh: event.target.value, updated: true });\r\n        }\r\n    }\r\n\r\n    updateChest = (event: any) => {\r\n        const re = /^[-+,0-9,\\.]+$/;\r\n        if (event.target.value === '' || re.test(event.target.value)) {\r\n            this.setState({ chest: event.target.value, updated: true });\r\n        }\r\n    }\r\n\r\n    updateWeight = (event: any) => {\r\n        const re = /^[-+,0-9,\\.]+$/;\r\n        if (event.target.value === '' || re.test(event.target.value)) {\r\n            this.setState({ weight: event.target.value, updated: true });\r\n        }\r\n    }\r\n\r\n    onFocusNeck = () => {\r\n        this.setState({ selected: 1, updated: true });\r\n    }\r\n\r\n    onFocusWaist = () => {\r\n        this.setState({ selected: 2, updated: true });\r\n    }\r\n\r\n    onFocusHips = () => {\r\n        this.setState({ selected: 3, updated: true });\r\n    }\r\n\r\n    onFocusThigh = () => {\r\n        this.setState({ selected: 4, updated: true });\r\n    }\r\n\r\n    onFocusChest = () => {\r\n        this.setState({ selected: 5, updated: true });\r\n    }\r\n\r\n    onFocusUpperArm = () => {\r\n        this.setState({ selected: 6, updated: true });\r\n    }\r\n\r\n    onFocusWeight = () => {\r\n        this.setState({ selected: 0, updated: true });\r\n    }\r\n\r\n    getBodyParts = () => {\r\n        if (this.state.selected === 1) {\r\n            return (\r\n                <div>\r\n                    <Image src=\"Female-Body-Silhouette-neck.svg\" size='medium' />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (this.state.selected === 2) {\r\n            return (\r\n                <div>\r\n                    <Image src=\"Female-Body-Silhouette-waist.svg\" size='medium' />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (this.state.selected === 3) {\r\n            return (\r\n                <div>\r\n                    <Image src=\"Female-Body-Silhouette-hips.svg\" size='medium' />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (this.state.selected === 4) {\r\n            return (\r\n                <div>\r\n                    <Image src=\"Female-Body-Silhouette-thigh.svg\" size='medium' />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (this.state.selected === 5) {\r\n            return (\r\n                <div>\r\n                    <Image src=\"Female-Body-Silhouette-chest.svg\" size='medium' />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (this.state.selected === 6) {\r\n            return (\r\n                <div>\r\n                    <Image src=\"Female-Body-Silhouette-upper-arm.svg\" size='medium' />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Image src=\"Female-Body-Silhouette-new.svg\" size='medium' />\r\n            </div>\r\n            );\r\n    }\r\n\r\n    render() {\r\n        if (this.props.update !== this.state.dirty)\r\n        {\r\n            console.log('updating measurement values');\r\n            this.setState({\r\n                neck: this.props.measurements.neck,\r\n                upperArm: this.props.measurements.upperArm,\r\n                waist: this.props.measurements.waist,\r\n                hips: this.props.measurements.hips,\r\n                thigh: this.props.measurements.thigh,\r\n                chest: this.props.measurements.chest,\r\n                weight: this.props.measurements.weight,\r\n                dirty: this.props.update\r\n            });\r\n        }\r\n\r\n        if (this.state.updated === true) {\r\n            this.setState({ updated: false });\r\n            this.props.updateMeasurements({ neck: this.state.neck, waist: this.state.waist, upperArm: this.state.upperArm, hips: this.state.hips, thigh: this.state.thigh, chest: this.state.chest, weight: this.state.weight });\r\n        }\r\n\r\n        return (\r\n            <Grid centered>\r\n                <Grid.Row columns={2} stretched>\r\n                    <Grid.Column width={10}>\r\n                        <Grid.Column as='a' width={4} textAlign='left'>\r\n                            <h5>Neck</h5>\r\n                        </Grid.Column>\r\n                        <Grid.Column width={12} textAlign='left'>\r\n                            <input value={this.state.neck} onChange={this.updateNeck} placeholder='Neck' onFocus={this.onFocusNeck} />\r\n                        </Grid.Column>\r\n                        <Grid.Column as='a' width={4} textAlign='left'>\r\n                            <h5>Upper Arm</h5>\r\n                        </Grid.Column>\r\n                        <Grid.Column width={12} textAlign='left'>\r\n                            <input value={this.state.upperArm} onChange={this.updateUpperArm} placeholder='Upper Arm' onFocus={this.onFocusUpperArm} />\r\n                        </Grid.Column>\r\n                        <Grid.Column as='a' width={4} textAlign='left'>\r\n                            <h5>Waist</h5>\r\n                        </Grid.Column>\r\n                        <Grid.Column width={12} textAlign='left'>\r\n                            <input value={this.state.waist} onChange={this.updateWaist} placeholder='Waist' onFocus={this.onFocusWaist} />\r\n                        </Grid.Column>\r\n                        <Grid.Column as='a' width={4} textAlign='left'>\r\n                            <h5>Hips</h5>\r\n                        </Grid.Column>\r\n                        <Grid.Column width={12} textAlign='left'>\r\n                            <input value={this.state.hips} onChange={this.updateHips} placeholder='Hips' onFocus={this.onFocusHips} />\r\n                        </Grid.Column>\r\n                        <Grid.Column as='a' width={4} textAlign='left'>\r\n                            <h5>Thigh</h5>\r\n                        </Grid.Column>\r\n                        <Grid.Column width={12} textAlign='left'>\r\n                            <input value={this.state.thigh} onChange={this.updateThigh} placeholder='Thigh' onFocus={this.onFocusThigh} />\r\n                        </Grid.Column>\r\n                        <Grid.Column as='a' width={4} textAlign='left'>\r\n                            <h5>Chest</h5>\r\n                        </Grid.Column>\r\n                        <Grid.Column width={12} textAlign='left'>\r\n                            <input value={this.state.chest} onChange={this.updateChest} placeholder='Chest' onFocus={this.onFocusChest} />\r\n                        </Grid.Column>\r\n                        <Grid.Column as='a' width={4} textAlign='left'>\r\n                            <h5>Weight</h5>\r\n                        </Grid.Column>\r\n                        <Grid.Column width={12} textAlign='left'>\r\n                            <input value={this.state.weight} onChange={this.updateWeight} placeholder='Weight' onFocus={this.onFocusWeight} />\r\n                        </Grid.Column>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={6}>\r\n                        {this.getBodyParts()}\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            </Grid>);\r\n    }\r\n}\r\n\r\nexport default connect()(MeasurementsTable);","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Grid } from 'semantic-ui-react';\r\n\r\ninterface IProps {\r\n    measurements: IMeasurements;\r\n    age: number;\r\n    targetWeight: number;\r\n    update: boolean;\r\n}\r\n\r\ninterface IMeasurements {\r\n    neck: number;\r\n    upperArm: number\r\n    waist: number;\r\n    hips: number;\r\n    thigh: number;\r\n    chest: number;\r\n    weight: number\r\n}\r\n\r\ninterface IState {\r\n    username: string;\r\n    password: string;\r\n    updated: boolean;\r\n}\r\n\r\nclass MeasurementsHeader extends React.Component<IProps, IState> {\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            username: '', password: '', updated: false\r\n        };\r\n    }\r\n\r\n    getBodyFatIndicator = (age: number, bodyFat: number) => {\r\n        if (age <= 20) {\r\n            if (11.3 <= bodyFat && bodyFat <= 15.7) {\r\n                return 'LEAN';\r\n            }\r\n            if (15.7 < bodyFat && bodyFat <= 21.5) {\r\n                return 'IDEAL';\r\n            }\r\n            if (21.5 < bodyFat && bodyFat <= 29.0) {\r\n                return 'AVERAGE';\r\n            }\r\n            if (29.0 < bodyFat && bodyFat <= 34.6) {\r\n                return 'ABOVE AVERAGE';\r\n            }\r\n        }\r\n        if (21 <= age && age <= 25) {\r\n            if (11.9 <= bodyFat && bodyFat <= 18.4) {\r\n                return 'LEAN';\r\n            }\r\n            if (18.4 < bodyFat && bodyFat <= 23.8) {\r\n                return 'IDEAL';\r\n            }\r\n            if (23.8 < bodyFat && bodyFat <= 29.6) {\r\n                return 'AVERAGE';\r\n            }\r\n            if (29.6 < bodyFat && bodyFat <= 35.2) {\r\n                return 'ABOVE AVERAGE';\r\n            }\r\n        }\r\n        if (26 <= age && age <= 30) {\r\n            if (12.5 <= bodyFat && bodyFat <= 19.0) {\r\n                return 'LEAN';\r\n            }\r\n            if (19.0 < bodyFat && bodyFat <= 24.5) {\r\n                return 'IDEAL';\r\n            }\r\n            if (24.5 < bodyFat && bodyFat <= 31.5) {\r\n                return 'AVERAGE';\r\n            }\r\n            if (31.5 < bodyFat && bodyFat <= 35.8) {\r\n                return 'ABOVE AVERAGE';\r\n            }\r\n        }\r\n        if (31 <= age && age <= 35) {\r\n            if (13.2 <= bodyFat && bodyFat <= 19.6) {\r\n                return 'LEAN';\r\n            }\r\n            if (19.6 < bodyFat && bodyFat <= 25.1) {\r\n                return 'IDEAL';\r\n            }\r\n            if (25.1 < bodyFat && bodyFat <= 32.1) {\r\n                return 'AVERAGE';\r\n            }\r\n            if (32.1 < bodyFat && bodyFat <= 36.4) {\r\n                return 'ABOVE AVERAGE';\r\n            }\r\n        }\r\n        if (36 <= age && age <= 40) {\r\n            console.log(\"--------------> should at leats here\");\r\n            if (13.8 <= bodyFat && bodyFat <= 22.2) {\r\n                return 'LEAN';\r\n            }\r\n            if (22.2 < bodyFat && bodyFat <= 27.3) {\r\n                return 'IDEAL';\r\n            }\r\n            if (27.3 < bodyFat && bodyFat <= 32.7) {\r\n                return 'AVERAGE';\r\n            }\r\n            if (32.7 < bodyFat && bodyFat <= 37.0) {\r\n                return 'ABOVE AVERAGE';\r\n            }\r\n        }\r\n        if (41 <= age && age <= 45) {\r\n            if (14.4 <= bodyFat && bodyFat <= 22.8) {\r\n                return 'LEAN';\r\n            }\r\n            if (22.8 < bodyFat && bodyFat <= 27.9) {\r\n                return 'IDEAL';\r\n            }\r\n            if (27.9 < bodyFat && bodyFat <= 34.4) {\r\n                return 'AVERAGE';\r\n            }\r\n            if (34.4 < bodyFat && bodyFat <= 37.7) {\r\n                return 'ABOVE AVERAGE';\r\n            }\r\n        }\r\n        if (46 <= age && age <= 50) {\r\n            if (15.0 <= bodyFat && bodyFat <= 23.4) {\r\n                return 'LEAN';\r\n            }\r\n            if (23.4 < bodyFat && bodyFat <= 28.6) {\r\n                return 'IDEAL';\r\n            }\r\n            if (28.6 < bodyFat && bodyFat <= 35.0) {\r\n                return 'AVERAGE';\r\n            }\r\n            if (35.0 < bodyFat && bodyFat <= 38.3) {\r\n                return 'ABOVE AVERAGE';\r\n            }\r\n        }\r\n        if (51 <= age && age <= 55) {\r\n            if (15.6 <= bodyFat && bodyFat <= 24.0) {\r\n                return 'LEAN';\r\n            }\r\n            if (24.0 < bodyFat && bodyFat <= 29.2) {\r\n                return 'IDEAL';\r\n            }\r\n            if (29.2 < bodyFat && bodyFat <= 35.6) {\r\n                return 'AVERAGE';\r\n            }\r\n            if (35.6 < bodyFat && bodyFat <= 38.9) {\r\n                return 'ABOVE AVERAGE';\r\n            }\r\n        }\r\n        if (56 <= age) {\r\n            if (16.3 <= bodyFat && bodyFat <= 24.6) {\r\n                return 'LEAN';\r\n            }\r\n            if (24.6 < bodyFat && bodyFat <= 29.8) {\r\n                return 'IDEAL';\r\n            }\r\n            if (29.8 < bodyFat && bodyFat <= 37.2) {\r\n                return 'AVERAGE';\r\n            }\r\n            if (37.2 < bodyFat && bodyFat <= 39.5) {\r\n                return 'ABOVE AVERAGE';\r\n            }\r\n        }\r\n\r\n        return 'AVERAGE';\r\n    }\r\n\r\n    getColour = (level: string) => {\r\n        if (level === 'LEAN') {\r\n            return 'blue';\r\n        }\r\n\r\n        if (level === 'IDEAL') {\r\n            return 'green';\r\n        }\r\n\r\n        if (level === 'AVERAGE') {\r\n            return 'yellow';\r\n        }\r\n\r\n        return 'red';\r\n    }\r\n\r\n    render() {\r\n\r\n        var divLabelStyle1 = {\r\n            color: '#0a0212',\r\n        };\r\n\r\n        var divLabelStyle2 = {\r\n            color: '#0a0212',\r\n            backgroundColor: 'Yellow'\r\n        };\r\n\r\n        var divLabelStyle3 = {\r\n            color: '#fffafa',\r\n            backgroundColor:'Red'\r\n        };\r\n\r\n        var divLabelStyle4 = {\r\n            color: '#fffafa',\r\n            fontFamily: 'Comic Sans MS',\r\n            fontSize: '20px'\r\n        };\r\n\r\n        if (this.state.updated !== this.props.update)\r\n        {\r\n            this.setState({ updated: this.props.update });\r\n        }\r\n\r\n        const bodyFatPercent = (((parseFloat(this.props.measurements.waist.toString()) + parseFloat(this.props.measurements.hips.toString())) - parseFloat(this.props.measurements.neck.toString())) / 2);\r\n        const level = this.getBodyFatIndicator(this.props.age, bodyFatPercent);\r\n        return (\r\n            <Grid centered>\r\n                <Grid.Row divided color='pink' textAlign='center'>\r\n                    <Grid.Column color='pink' textAlign='center'>\r\n                        <div style={divLabelStyle4}>\r\n                            <a>Full Body Assessments</a>\r\n                        </div>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n                <Grid.Row divided columns={3} textAlign='center'>\r\n                    <Grid.Column color={this.getColour(level)} textAlign='center'>\r\n                        <div><a>Body Fat %:</a></div>\r\n                        <div style={divLabelStyle1}><a>{bodyFatPercent}</a></div>\r\n                    </Grid.Column>\r\n                    <Grid.Column color={this.getColour(level)} textAlign='center'>\r\n                        <div><a>Body Fat:</a></div>\r\n                        <div style={divLabelStyle1}><a>{level}</a></div>\r\n                    </Grid.Column>\r\n                    <Grid.Column color={this.getColour(level)} textAlign='center'>\r\n                        <div><a>Weight Goal:</a></div>\r\n                        <div style={divLabelStyle1}><a>{this.props.targetWeight} kg</a></div>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            </Grid>);\r\n    }\r\n}\r\n\r\nexport default connect()(MeasurementsHeader);","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Button, Segment, Grid, Menu, Label, Input, Icon } from 'semantic-ui-react'\r\nimport { ApplicationState } from '../store';\r\nimport * as LoginStore from '../store/Login';\r\nimport SemanticDatepicker from 'react-semantic-ui-datepickers';\r\nimport 'react-semantic-ui-datepickers/dist/react-semantic-ui-datepickers.css';\r\nimport MeasurementsTable from './MeasurementsTable'\r\nimport MeasurementsHeader from './MeasurementsHeader';\r\n\r\ninterface IProps {\r\n}\r\n\r\ninterface IState {\r\n    username: string;\r\n    password: string;\r\n    activeItem: string;\r\n    selectedDate: Date;\r\n    prevDate: Date;\r\n    macroGuides: IMacroGuides;\r\n    measurements: IMeasurements;\r\n    measurementDtos: IMeasurementDto[];\r\n    clients: IClient[];\r\n    macrosPlans: IMacrosPlan[];\r\n    targetWeight: number;\r\n    age: number;\r\n    updated: boolean;\r\n    apiUpdate: boolean;\r\n    savingStatus: string;\r\n    dateChanged: boolean; \r\n}\r\n\r\ninterface IMacroGuides {\r\n    carb: number;\r\n    protein: number;\r\n    fat: number;\r\n    veg: number;\r\n    bodyFat: number;\r\n}\r\n\r\ninterface IMeasurements {\r\n    neck: number;\r\n    upperArm: number\r\n    waist: number;\r\n    hips: number;\r\n    thigh: number;\r\n    chest: number;\r\n    weight: number;\r\n}\r\n\r\ninterface IMeasurementDto {\r\n    id: number;\r\n    neck: number;\r\n    upperArm: number;\r\n    waist: number;\r\n    hips: number;\r\n    thigh: number;\r\n    chest: number;\r\n    weight: number;\r\n    bodyFat: number;\r\n    updated: string;\r\n    created: string;\r\n    clientId: number;\r\n}\r\n\r\ninterface IMacrosPlan {\r\n    id: number,\r\n    height: number,\r\n    weight: number,\r\n    targetWeight: number,\r\n    macroType: string;\r\n    activityLevel: string;\r\n    carbPercent: number,\r\n    proteinPercent: number,\r\n    fatPercent: number,\r\n    updated: string;\r\n    created: string;\r\n    clientId: number;\r\n}\r\n\r\ninterface IClient {\r\n    id: number,\r\n    lastName: string;\r\n    firstName: string;\r\n    address: string;\r\n    city: string;\r\n    age: number;\r\n    created: string;\r\n}\r\n\r\n// At runtime, Redux will merge together...\r\ntype LoginProps =\r\n    IProps\r\n    & LoginStore.LoginState // ... state we've requested from the Redux store\r\n    & typeof LoginStore.actionCreators // ... plus action creators we've requested\r\n    & RouteComponentProps<{ username: string, password: string }>; // ... plus incoming routing parameters\r\n\r\nclass Measurements extends React.Component<LoginProps, IState> {\r\n\r\n    public componentDidMount() {\r\n        this.props.getLogin();\r\n        var date = new Date();\r\n        date.setHours(0, 0, 0, 0);\r\n        this.setState({ selectedDate: date, prevDate: date });\r\n\r\n        if (this.props.logins.length > 0) {\r\n\r\n            console.log('--->' + this.props.logins[0].clientId);\r\n            fetch('api/client?clientId=' + this.props.logins[0].clientId)\r\n                .then(response => response.json() as Promise<IClient[]>)\r\n                .then(data => this.setState({\r\n                    clients: data, apiUpdate: true\r\n                })).catch(error => console.log(error));\r\n\r\n            fetch('api/client/' + this.props.logins[0].clientId + '/measurements/closest?date=' + (date).toISOString())\r\n                .then(response => response.json() as Promise<IMeasurementDto[]>)\r\n                .then(data => this.setState({\r\n                    measurementDtos: data, apiUpdate: true\r\n                })).catch(error => console.log(error));\r\n\r\n            fetch('api/client/' + this.props.logins[0].clientId + '/macrosplan')\r\n                .then(response => response.json() as Promise<IMacrosPlan[]>)\r\n                .then(data => this.setState({\r\n                    macrosPlans: data, apiUpdate: true\r\n                })).catch(error => console.log(error));\r\n        }\r\n    }\r\n\r\n    onSubmit = () => {\r\n        this.setState({ username: '', password: '' });\r\n    }\r\n\r\n    updateInput = (event: any) => {\r\n        this.setState({ username: event.target.value });\r\n    }\r\n\r\n    updateInput2 = (event: any) => {\r\n        this.setState({ password: event.target.value });\r\n    }\r\n\r\n    getComponent = () => {\r\n        if (this.state.activeItem == 'Body') {\r\n            return (<MeasurementsTable type='Body' measurements={this.state.measurements} updateMeasurements={this.updateMeasurements} update={this.state.updated} />);\r\n        }\r\n    }\r\n\r\n    updateMeasurements = (input: IMeasurements) => {\r\n        this.setState({ measurements: { neck: input.neck, upperArm: input.upperArm, waist: input.waist, hips: input.hips, thigh: input.thigh, chest: input.chest, weight: input.weight } });\r\n        this.setState({ updated: !this.state.updated, savingStatus: 'Not Saved' });\r\n    }\r\n\r\n    constructor(props: LoginProps) {\r\n        super(props);\r\n        this.updateMeasurements = this.updateMeasurements.bind(this);\r\n        this.state = {\r\n            username: '', password: '',\r\n            activeItem: 'Body',\r\n            selectedDate: new Date(),\r\n            prevDate: new Date(),\r\n            macroGuides: { carb: 0, protein: 0, fat: 0, veg: 0, bodyFat: 0 },\r\n            measurements: { neck: 0.0, upperArm:0.0, waist: 0.0, hips: 0.0, thigh: 0.0, chest: 0.0, weight: 0.0 },\r\n            measurementDtos: [],\r\n            clients: [],\r\n            macrosPlans: [],\r\n            updated: false,\r\n            apiUpdate: false,\r\n            savingStatus: 'saved',\r\n            dateChanged: false,\r\n            age: 0,\r\n            targetWeight: 0,\r\n        };\r\n    }\r\n\r\n    handleItemClick = (e: any, { name }: any) => this.setState({ activeItem: name })\r\n\r\n    handleDateChange = (event: any, field: any) => {\r\n        var newDate = new Date(field['value']);\r\n        //console.log('1 --' + Math.abs((this.state.selectedDate.getTime() - newDate.getTime()) / (1000 * 3600 * 24)));\r\n        //console.log('2 --' + Math.abs((this.state.prevDate.getTime() - newDate.getTime()) / (1000 * 3600 * 24)));\r\n        var dayDiff = Math.abs((this.state.prevDate.getTime() - newDate.getTime()) / (1000 * 3600 * 24));\r\n        if (dayDiff < 356) {\r\n            this.setState({ prevDate: this.state.selectedDate });\r\n            this.setState({ selectedDate: new Date(field['value']), measurementDtos: [], dateChanged: true })\r\n        }\r\n    }\r\n\r\n    setValuesFromDto = () => {\r\n        if (this.state.clients.length > 0) {\r\n            const client = this.state.clients[0];\r\n            console.log(client.firstName);\r\n            this.setState({ age: client.age });\r\n        }\r\n\r\n        if (this.state.macrosPlans.length > 0) {\r\n            const plan = this.state.macrosPlans[0];\r\n            this.setState({ targetWeight: plan.targetWeight });\r\n        }\r\n\r\n        if (this.state.measurementDtos.length > 0) {\r\n            console.log(\"----> have value\");\r\n            console.log(this.state.measurementDtos);\r\n            const measurement = this.state.measurementDtos[0];\r\n            this.state.measurements.neck = measurement.neck;\r\n            this.state.measurements.upperArm = measurement.upperArm;\r\n            this.state.measurements.chest = measurement.chest;\r\n            this.state.measurements.waist = measurement.waist;\r\n            this.state.measurements.hips = measurement.hips;\r\n            this.state.measurements.thigh = measurement.thigh;\r\n            this.state.measurements.weight = measurement.weight;\r\n            this.setState({ measurements: this.state.measurements });\r\n            this.setState({ apiUpdate: false, updated: !this.state.updated });\r\n        }\r\n        else {\r\n            console.log(\"----> no value\");\r\n            this.state.measurements.neck = 0;\r\n            this.state.measurements.upperArm = 0;\r\n            this.state.measurements.chest = 0;\r\n            this.state.measurements.waist = 0;\r\n            this.state.measurements.hips = 0;\r\n            this.state.measurements.thigh = 0;\r\n            this.state.measurements.weight = 0;\r\n            this.setState({ measurements: this.state.measurements });\r\n            this.setState({ apiUpdate: false, updated: !this.state.updated });\r\n        }\r\n    }\r\n\r\n    onCancel = () => {\r\n        this.setValuesFromDto();\r\n    }\r\n\r\n    onSave = () => {\r\n        this.setState({ savingStatus: 'Saving in progress' })\r\n        var fetchStr = 'api/client/measurement?date=' + this.state.selectedDate.toISOString();\r\n        console.log(this.state.measurementDtos.length);\r\n        if (this.state.measurementDtos.length < 1) {\r\n            console.log(fetchStr);\r\n            this.state.measurementDtos.push({\r\n                id: 0,\r\n                neck: parseFloat(this.state.measurements.neck.toString()),\r\n                upperArm: parseFloat(this.state.measurements.upperArm.toString()),\r\n                waist: parseFloat(this.state.measurements.waist.toString()),\r\n                hips: parseFloat(this.state.measurements.hips.toString()),\r\n                thigh: parseFloat(this.state.measurements.thigh.toString()),\r\n                chest: parseFloat(this.state.measurements.chest.toString()),\r\n                weight: parseFloat(this.state.measurements.weight.toString()),\r\n                bodyFat: 0,\r\n                updated: (new Date()).toISOString(),\r\n                created: this.state.selectedDate.toISOString(),\r\n                clientId: this.props.logins[0].clientId\r\n            })\r\n            this.setState({ measurementDtos: this.state.measurementDtos });\r\n        }\r\n\r\n        console.log(fetchStr);\r\n        fetch(fetchStr, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                id: 0,\r\n                neck: parseFloat(this.state.measurements.neck.toString()),\r\n                upperArm: parseFloat(this.state.measurements.upperArm.toString()),\r\n                waist: parseFloat(this.state.measurements.waist.toString()),\r\n                hips: parseFloat(this.state.measurements.hips.toString()),\r\n                thigh: parseFloat(this.state.measurements.thigh.toString()),\r\n                chest: parseFloat(this.state.measurements.chest.toString()),\r\n                weight: parseFloat(this.state.measurements.weight.toString()),\r\n                bodyFat: 0,\r\n                updated: new Date(),\r\n                created: this.state.selectedDate.toISOString(),\r\n                clientId: this.props.logins[0].clientId,\r\n            })\r\n        }).then(response => response.json()).then(data => this.setState({ savingStatus: 'Saved' })).catch(error => console.log('put macros ---------->' + error));\r\n    }\r\n\r\n    getColour = () => {\r\n        if (this.state.savingStatus === 'Not Saved') {\r\n            return 'red';\r\n        }\r\n\r\n        return 'green';\r\n    }\r\n\r\n    render() {\r\n        var divLabelStyle = {\r\n            color: '#fffafa',\r\n            backgroundColor: this.getColour()\r\n        };\r\n\r\n        const activeItem = this.state.activeItem;\r\n        if (this.props.logins.length > 0) {\r\n            if (this.state.dateChanged === true) {\r\n                this.setState({ dateChanged: false });\r\n                if (this.props.logins.length > 0) {\r\n                    fetch('api/client/' + this.props.logins[0].clientId + '/measurements/closest?date=' + this.state.selectedDate.toISOString())\r\n                        .then(response => response.json() as Promise<IMeasurementDto[]>)\r\n                        .then(data => this.setState({\r\n                            measurementDtos: data, apiUpdate: true\r\n                        })).catch(error => console.log(error));\r\n                }\r\n            }\r\n\r\n            if (this.state.apiUpdate === true) {\r\n                this.setValuesFromDto();\r\n            }\r\n\r\n        return (\r\n            <div>\r\n                <Grid centered>\r\n                    <Grid.Row columns={2}>\r\n                        <Grid.Column verticalAlign='middle' floated='left' textAlign='left'>\r\n                            <Label size='large' as='a' color='pink' basic circular>Weekly Measurements Tracker</Label>\r\n                        </Grid.Column>\r\n                        <Grid.Column verticalAlign='middle' floated='right' textAlign='right'>\r\n                            <SemanticDatepicker value={this.state.selectedDate} date={new Date()} onChange={this.handleDateChange} showToday />\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                    <Grid.Row>\r\n                        <Grid.Column>\r\n                            <Segment textAlign='center'>\r\n                                <MeasurementsHeader targetWeight={this.state.targetWeight} measurements={this.state.measurements} age={this.state.age} update={this.state.updated} />\r\n                            </Segment>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                    <Grid.Row>\r\n                        <Grid.Column width={16}>\r\n                            <Menu attached='top' tabular compact>\r\n                                <Menu.Item\r\n                                    name='Body'\r\n                                    active={activeItem === 'Body'}\r\n                                    onClick={this.handleItemClick}\r\n                                />\r\n                            </Menu>\r\n\r\n                            <Segment textAlign='center' attached='bottom'>\r\n                                {this.getComponent()}\r\n                            </Segment>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                    <Grid.Row>\r\n                        <Grid.Column verticalAlign='middle' width={16} textAlign='center' floated='left'>\r\n                            <div style={divLabelStyle}>\r\n                                <a>{this.state.savingStatus}</a>\r\n                            </div>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                    <Grid.Row columns={3}>\r\n                        <Grid.Column width={4} textAlign='left' floated='left'>\r\n                            <Button floated='left' size='tiny' onClick={this.onCancel} secondary>Cancel</Button>\r\n                        </Grid.Column>\r\n                        <Grid.Column width={4} textAlign='left' floated='left'>\r\n                            <Button floated='left' size='tiny' onClick={this.onSave} primary>Save</Button>\r\n                        </Grid.Column>\r\n                        <Grid.Column verticalAlign='middle' width={8} textAlign='left' floated='left'>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                </Grid>\r\n            </div>);\r\n        }\r\n        return (<Redirect to=\"/\" />);\r\n    }\r\n\r\n    private getLoginCredentials = () => {\r\n        this.props.requestLogins(this.state.username, this.state.password);\r\n    }\r\n\r\n    private clearCredentials = () => {\r\n        this.props.requestLogout(this.state.username, this.state.password);\r\n    }\r\n}\r\n\r\n//export default connect()(Home);\r\nexport default connect(\r\n    (state: ApplicationState) => state.logins, // Selects which state properties are merged into the component's props\r\n    LoginStore.actionCreators // Selects which action creators are merged into the component's props\r\n)(Measurements as any);","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Button, Form, Input, Grid, Dropdown } from 'semantic-ui-react';\r\nimport Meals from './Meals';\r\nimport RangeSlider from 'react-bootstrap-range-slider';\r\n\r\ninterface IProps {\r\n    personal: IPersonal;\r\n    update: boolean;\r\n    type: string;\r\n    updatePersonal: Function\r\n}\r\n\r\ninterface IPersonal {\r\n    name: string;\r\n    age: number;\r\n    height: number;\r\n    weight: number;\r\n    targetWeight: number;\r\n    activityLevel: number;\r\n    macroType: number;\r\n    carbPercent: number;\r\n    proteinPercent: number;\r\n    fatPercent: number;\r\n}\r\n\r\ninterface IState {\r\n    username: string;\r\n    password: string;\r\n    updated: boolean;\r\n    dirty: boolean;\r\n    name: string;\r\n    age: number;\r\n    height: number;\r\n    weight: number;\r\n    targetWeight: number;\r\n    activityLevel: string;\r\n    macroType: string;\r\n    carbPercent: number;\r\n    proteinPercent: number;\r\n    fatPercent: number;\r\n}\r\n\r\nconst activityTypes = [\r\n    {\r\n        key: 'Sedentary',\r\n        text: 'Sedentary',\r\n        value: 'Sedentary'\r\n    },\r\n    {\r\n        key: 'Lightly Active',\r\n        text: 'Lightly Active',\r\n        value: 'Lightly Active'\r\n    },\r\n    {\r\n        key: 'Moderately Active',\r\n        text: 'Moderately Active',\r\n        value: 'Moderately Active'\r\n    },\r\n    {\r\n        key: 'Very Active',\r\n        text: 'Very Active',\r\n        value: 'Very Active'\r\n    },\r\n    {\r\n        key: 'Extra Active',\r\n        text: 'Extra Active',\r\n        value: 'Extra Active'\r\n    }\r\n];\r\n\r\nconst mealPlan = [\r\n    {\r\n        key: 'Lose Weight',\r\n        text: 'Lose Weight',\r\n        value: 'Lose Weight'\r\n    },\r\n    {\r\n        key: 'Maintain/Muscle Gain',\r\n        text: 'Maintain/Muscle Gain',\r\n        value: 'Maintain/Muscle Gain'\r\n    },\r\n    {\r\n        key: 'Gain Weight',\r\n        text: 'Gain Weight',\r\n        value: 'Gain Weight'\r\n    }\r\n];\r\n\r\nclass PersonalTable extends React.Component<IProps, IState> {\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            username: '', password: '', updated: false, name: '', age: 0,\r\n            height: 0.0, weight: 0.0, targetWeight: 0.0, activityLevel: 'Sedentary', macroType: 'Lose Weight',\r\n            carbPercent: 10.0, proteinPercent: 40.0, fatPercent: 30.0, dirty: false\r\n        };\r\n    }\r\n\r\n    public componentDidMount() {\r\n        this.setState({\r\n            name: this.props.personal.name,\r\n            age: this.props.personal.age,\r\n            height: this.props.personal.height,\r\n            activityLevel: this.getActivityLevelText(this.props.personal.activityLevel),\r\n            macroType: this.getMacroTypeText(this.props.personal.macroType)\r\n        });\r\n    }\r\n\r\n    updateName = (event: any) => {\r\n        this.setState({ name: event.target.value, updated: true });\r\n    }\r\n\r\n    updateAge = (event: any) => {\r\n        if (isNaN(parseInt(event.target.value))) {\r\n            this.setState({ age: 0, updated: true });\r\n            return;\r\n        }\r\n\r\n        this.setState({ age: parseInt(event.target.value), updated: true });\r\n    }\r\n\r\n    updateHeight = (event: any) => {\r\n        const re = /^[-+,0-9,\\.]+$/;\r\n        if (event.target.value === '' || re.test(event.target.value)) {\r\n            this.setState({ height: event.target.value, updated: true });\r\n        }\r\n    }\r\n\r\n    updateWeight = (event: any) => {\r\n        const re = /^[-+,0-9,\\.]+$/;\r\n        if (event.target.value === '' || re.test(event.target.value)) {\r\n            this.setState({ weight: event.target.value, updated: true });\r\n        }\r\n    }\r\n\r\n    updateTargetWeight = (event: any) => {\r\n        const re = /^[-+,0-9,\\.]+$/;\r\n        if (event.target.value === '' || re.test(event.target.value)) {\r\n            this.setState({ targetWeight: event.target.value, updated: true });\r\n        }\r\n    }\r\n\r\n    getActivityLevelText = (type: number) => {\r\n        if (type === 0) {\r\n            return 'Sedentary';\r\n        }\r\n\r\n        if (type === 1) {\r\n            return 'Lightly Active';\r\n        }\r\n\r\n        if (type === 2) {\r\n            return 'Moderately Active';\r\n        }\r\n\r\n        if (type === 3) {\r\n            return 'Very Active';\r\n        }\r\n\r\n        if (type === 4) {\r\n            return 'Extra Active';\r\n        }\r\n\r\n        return 'Sedentary';\r\n    }\r\n\r\n    getActivityLevel = (text: string) => {\r\n        if (text === 'Sedentary') {\r\n            return 0;\r\n        }\r\n\r\n        if (text === 'Lightly Active') {\r\n            return 1;\r\n        }\r\n\r\n        if (text === 'Moderately Active') {\r\n            return 2;\r\n        }\r\n\r\n        if (text === 'Very Active') {\r\n            return 3;\r\n        }\r\n\r\n        if (text === 'Extra Active') {\r\n            return 4;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    setActivityLevel = (event: any, data:any) => {\r\n        this.setState({ updated: true, activityLevel: data['value'] });\r\n    }\r\n\r\n    getMacroTypeText = (type: number) => {\r\n        if (type === 0) {\r\n            return 'Lose Weight';\r\n        }\r\n\r\n        if (type === 1) {\r\n            return 'Maintain/Muscle Gain';\r\n        }\r\n\r\n        if (type === 2) {\r\n            return 'Gain Weight';\r\n        }\r\n\r\n        return 'Lose Weight';\r\n    }\r\n\r\n    getMacroType = (text: string) => {\r\n        if (text === 'Lose Weight') {\r\n            return 0;\r\n        }\r\n\r\n        if (text === 'Maintain/Muscle Gain') {\r\n            return 1;\r\n        }\r\n\r\n        if (text === 'Gain Weight') {\r\n            return 2;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    setMacroType = (event: any, data: any) => {\r\n        this.setState({ updated: true, macroType: data['value'] });\r\n        this.setState({ updated: true, carbPercent: this.getMinMaxMacroPortions(data['value'])['carb']['min'] });\r\n        this.setState({ updated: true, proteinPercent: this.getMinMaxMacroPortions(data['value'])['protein']['min'] });\r\n        this.setState({ updated: true, fatPercent: this.getMinMaxMacroPortions(data['value'])['fat']['min'] });\r\n    }\r\n\r\n    isPortionsExceeded = (carbPercent: number, proteinPercent: number, fatPercent: number) => {\r\n        if ((carbPercent + proteinPercent + fatPercent) > 100.0) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    setCarbPercent = (event: any) => {\r\n        var val = parseFloat(event.target.value);\r\n\r\n        if (val < this.getMinMaxMacroPortions(this.state.macroType)['carb']['min']) {\r\n            this.setState({ updated: true, carbPercent: this.getMinMaxMacroPortions(this.state.macroType)['carb']['min'] });\r\n            return;\r\n        }\r\n\r\n        if (val > this.getMinMaxMacroPortions(this.state.macroType)['carb']['max']) {\r\n            this.setState({ updated: true, carbPercent: this.getMinMaxMacroPortions(this.state.macroType)['carb']['max'] });\r\n            return;\r\n        }\r\n\r\n        if (this.isPortionsExceeded(val, this.state.proteinPercent, this.state.fatPercent)) {\r\n            return;\r\n        }\r\n\r\n        this.setState({ updated: true, carbPercent: parseFloat(event.target.value) });\r\n    }\r\n\r\n    setProteinPercent = (event: any) => {\r\n        var val = parseFloat(event.target.value);\r\n\r\n        if (val < this.getMinMaxMacroPortions(this.state.macroType)['protein']['min']) {\r\n            this.setState({ updated: true, proteinPercent: this.getMinMaxMacroPortions(this.state.macroType)['protein']['min'] });\r\n            return;\r\n        }\r\n\r\n        if (val > this.getMinMaxMacroPortions(this.state.macroType)['protein']['max']) {\r\n            this.setState({ updated: true, proteinPercent: this.getMinMaxMacroPortions(this.state.macroType)['protein']['max'] });\r\n            return;\r\n        }\r\n\r\n        if (this.isPortionsExceeded(this.state.carbPercent, val, this.state.fatPercent)) {\r\n            return;\r\n        }\r\n\r\n        this.setState({ updated: true, proteinPercent: parseFloat(event.target.value) });\r\n    }\r\n\r\n    setFatPercent = (event: any) => {\r\n        var val = parseFloat(event.target.value);\r\n\r\n        if (val < this.getMinMaxMacroPortions(this.state.macroType)['fat']['min']) {\r\n            this.setState({ updated: true, fatPercent: this.getMinMaxMacroPortions(this.state.macroType)['fat']['min'] });\r\n            return;\r\n        }\r\n\r\n        if (val > this.getMinMaxMacroPortions(this.state.macroType)['fat']['max']) {\r\n            this.setState({ updated: true, fatPercent: this.getMinMaxMacroPortions(this.state.macroType)['fat']['max'] });\r\n            return;\r\n        }\r\n\r\n        if (this.isPortionsExceeded(this.state.carbPercent, this.state.proteinPercent, val)) {\r\n            return;\r\n        }\r\n\r\n        this.setState({ updated: true, fatPercent: parseFloat(event.target.value) });\r\n    }\r\n\r\n    macroPortionsDict = {\r\n        'Lose Weight': { 'carb': { 'min': 25, 'max': 45 }, 'protein': { 'min': 35, 'max': 50 }, 'fat': { 'min': 20, 'max': 35 } },\r\n        'Maintain/Muscle Gain': { 'carb': { 'min': 35, 'max': 55 }, 'protein': { 'min': 25, 'max': 40 }, 'fat': { 'min': 25, 'max': 40 } },\r\n        'Gain Weight': { 'carb': { 'min': 40, 'max': 60 }, 'protein': { 'min': 25, 'max': 35 }, 'fat': { 'min': 15, 'max': 25 } }\r\n    };\r\n\r\n    getMinMaxMacroPortions = (macroType: string) => {\r\n        if (macroType === 'Lose Weight') {\r\n            return this.macroPortionsDict['Lose Weight'];\r\n        }\r\n\r\n        if (macroType === 'Maintain/Muscle Gain') {\r\n            return this.macroPortionsDict['Maintain/Muscle Gain'];\r\n        }\r\n\r\n        if (macroType === 'Gain Weight') {\r\n            return this.macroPortionsDict['Gain Weight'];\r\n        }\r\n\r\n        return this.macroPortionsDict['Lose Weight'];\r\n    }\r\n\r\n    render() {\r\n        if (this.props.update !== this.state.dirty)\r\n        {\r\n            console.log('updating total values');\r\n            this.setState({\r\n                name: this.props.personal.name,\r\n                age: this.props.personal.age,\r\n                height: this.props.personal.height,\r\n                weight: this.props.personal.weight,\r\n                targetWeight: this.props.personal.targetWeight,\r\n                carbPercent: this.props.personal.carbPercent,\r\n                proteinPercent: this.props.personal.proteinPercent,\r\n                fatPercent: this.props.personal.fatPercent,\r\n                activityLevel: this.getActivityLevelText(this.props.personal.activityLevel),\r\n                macroType: this.getMacroTypeText(this.props.personal.macroType),\r\n                dirty: !this.state.dirty\r\n            });\r\n        }\r\n\r\n        if (this.state.updated === true) {\r\n            this.setState({ updated: false });\r\n            this.props.updatePersonal({\r\n                name: this.state.name, age: this.state.age,\r\n                height: this.state.height, weight: this.state.weight, targetWeight: this.state.targetWeight,\r\n                activityLevel: this.getActivityLevel(this.state.activityLevel),\r\n                macroType: this.getMacroType(this.state.macroType), carbPercent: this.state.carbPercent,\r\n                proteinPercent: this.state.proteinPercent, fatPercent: this.state.fatPercent,\r\n            });\r\n        }\r\n\r\n        var divLabelStyle = {\r\n            color:'blue',\r\n            fontSize: '10px',\r\n            verticalAlign: 'middle'\r\n        };\r\n\r\n        return (\r\n            <Grid centered>\r\n                <Grid.Row columns={2} stretched>\r\n                    <Grid.Column as='a' width={4} textAlign='left' verticalAlign='middle'>\r\n                        <a>Name:</a>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={12} textAlign='left' verticalAlign='middle'>\r\n                        <Input as='a' size='mini' value={this.state.name} placeholder='Name' onChange={this.updateName} />\r\n                    </Grid.Column>\r\n                    <Grid.Column as='a' width={4} textAlign='left' verticalAlign='middle'>\r\n                        <a>Age</a>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={12} textAlign='left' verticalAlign='middle'>\r\n                        <Input as='a' size='mini' value={this.state.age} placeholder='Age' onChange={this.updateAge} />\r\n                    </Grid.Column>\r\n                    <Grid.Column as='a' width={4} textAlign='left' verticalAlign='middle'>\r\n                        <a>Height</a>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={12} textAlign='left' verticalAlign='middle'>\r\n                        <Input as='a' size='mini' value={this.state.height} placeholder='Height' onChange={this.updateHeight} />\r\n                    </Grid.Column>\r\n                    <Grid.Column as='a' width={4} textAlign='left' verticalAlign='middle'>\r\n                        <a>Weight</a>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={12} textAlign='left' verticalAlign='middle'>\r\n                        <Input as='a' size='mini' value={this.state.weight} placeholder='Weight' onChange={this.updateWeight} />\r\n                    </Grid.Column>\r\n                    <Grid.Column as='a' width={4} textAlign='left' verticalAlign='middle'>\r\n                        <a>Target Weight</a>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={12} textAlign='left' verticalAlign='middle'>\r\n                        <Input as='a' size='mini' value={this.state.targetWeight} placeholder='Weight' onChange={this.updateTargetWeight} />\r\n                    </Grid.Column>\r\n                    <Grid.Column as='a' width={4} textAlign='left' verticalAlign='middle'>\r\n                        <a>Acivity Level</a>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={12} textAlign='left' verticalAlign='middle'>\r\n                        <Dropdown id='activities' value={this.state.activityLevel} selection options={activityTypes} onChange={this.setActivityLevel} />\r\n                    </Grid.Column>\r\n                    <Grid.Column as='a' width={4} textAlign='left' verticalAlign='middle'>\r\n                        <a>Macro Type</a>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={12} textAlign='left'>\r\n                        <Dropdown id='plans' value={this.state.macroType} selection options={mealPlan} onChange={this.setMacroType} />\r\n                    </Grid.Column>\r\n                    <Grid.Column as='a' width={3} textAlign='left'>\r\n                        <a>Carb:</a>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={3} textAlign='left' verticalAlign='middle'>\r\n                        <a style={divLabelStyle}>[{this.getMinMaxMacroPortions(this.state.macroType)['carb']['min']}% - {this.getMinMaxMacroPortions(this.state.macroType)['carb']['max']}%]</a>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={8} textAlign='left' verticalAlign='middle'>\r\n                        <RangeSlider\r\n                            variant='success'\r\n                            value={this.state.carbPercent}\r\n                            onChange={this.setCarbPercent}\r\n                            tooltipLabel={currentValue => `${currentValue}%`}\r\n                            tooltip='off'\r\n                            min={this.getMinMaxMacroPortions(this.state.macroType)['carb']['min']}\r\n                            max={this.getMinMaxMacroPortions(this.state.macroType)['carb']['max']}\r\n                        />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={2} textAlign='right' verticalAlign='middle'>\r\n                        <a>{this.state.carbPercent}%</a>\r\n                    </Grid.Column>\r\n                    <Grid.Column as='a' width={3} textAlign='left'>\r\n                        <a>Protein:</a>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={3} textAlign='left' verticalAlign='middle'>\r\n                        <a style={divLabelStyle}>[{this.getMinMaxMacroPortions(this.state.macroType)['protein']['min']}% - {this.getMinMaxMacroPortions(this.state.macroType)['protein']['max']}%]</a>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={8} textAlign='left'>\r\n                        <RangeSlider\r\n                            variant='warning'\r\n                            value={this.state.proteinPercent}\r\n                            onChange={this.setProteinPercent}\r\n                            tooltipLabel={currentValue => `${currentValue}%`}\r\n                            tooltip='off'\r\n                            min={this.getMinMaxMacroPortions(this.state.macroType)['protein']['min']}\r\n                            max={this.getMinMaxMacroPortions(this.state.macroType)['protein']['max']}\r\n                        />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={2} textAlign='right' verticalAlign='middle'>\r\n                        <a>{this.state.proteinPercent}%</a>\r\n                    </Grid.Column>\r\n                    <Grid.Column as='a' width={3} textAlign='left'>\r\n                        <a>Fat:</a>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={3} textAlign='left' verticalAlign='middle'>\r\n                        <a style={divLabelStyle}>[{this.getMinMaxMacroPortions(this.state.macroType)['fat']['min']}% - {this.getMinMaxMacroPortions(this.state.macroType)['fat']['max']}%]</a>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={8} textAlign='left'>\r\n                        <RangeSlider\r\n                            variant='danger'\r\n                            value={this.state.fatPercent}\r\n                            onChange={this.setFatPercent}\r\n                            tooltipLabel={currentValue => `${currentValue}%`}\r\n                            tooltip='off'\r\n                            min={this.getMinMaxMacroPortions(this.state.macroType)['fat']['min']}\r\n                            max={this.getMinMaxMacroPortions(this.state.macroType)['fat']['max']}\r\n                        />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={2} textAlign='right' verticalAlign='middle'>\r\n                        <a>{this.state.fatPercent}%</a>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            </Grid>);\r\n    }\r\n}\r\n\r\nexport default connect()(PersonalTable);","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Grid } from 'semantic-ui-react';\r\n\r\ninterface IProps {\r\n    guides: IMacroGuides;\r\n    personal: IPersonal;\r\n    update: boolean;\r\n}\r\n\r\ninterface IMacroGuides {\r\n    carb: number;\r\n    protein: number;\r\n    fat: number;\r\n    veg: number;\r\n    bodyFat: number;\r\n}\r\n\r\ninterface IPersonal {\r\n    name: string;\r\n    age: number;\r\n    height: number;\r\n    weight: number;\r\n    activityLevel: number;\r\n    macroType: number;\r\n    carbPercent: number;\r\n    proteinPercent: number;\r\n    fatPercent: number;\r\n}\r\n\r\ninterface IState {\r\n    username: string;\r\n    password: string;\r\n    updated: boolean;\r\n}\r\n\r\nclass PersonalHeader extends React.Component<IProps, IState> {\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            username: '', password: '', updated: false\r\n        };\r\n    }\r\n\r\n    getActivityLevel = () => {\r\n        if (this.props.personal.activityLevel == 0) {\r\n            return 1.2;\r\n        }\r\n\r\n        if (this.props.personal.activityLevel == 1) {\r\n            return 1.375;\r\n        }\r\n\r\n        if (this.props.personal.activityLevel == 2) {\r\n            return 1.55;\r\n        }\r\n\r\n        if (this.props.personal.activityLevel == 3) {\r\n            return 1.725;\r\n        }\r\n\r\n        if (this.props.personal.activityLevel == 4) {\r\n            return 1.9;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    render() {\r\n\r\n        var divLabelStyle1 = {\r\n            color: '#fffafa',\r\n            backgroundColor: 'Green'\r\n        };\r\n\r\n        var divLabelStyle2 = {\r\n            color: '#0a0212',\r\n            backgroundColor: 'Yellow'\r\n        };\r\n\r\n        var divLabelStyle3 = {\r\n            color: '#fffafa',\r\n            backgroundColor:'Red'\r\n        };\r\n\r\n        var divLabelStyle4 = {\r\n            color: '#fffafa',\r\n            fontFamily: 'Comic Sans MS',\r\n            fontSize: '20px'\r\n        };\r\n\r\n        //if (this.state.updated !== this.props.update)\r\n        //{\r\n            //console.log('updating total values');\r\n            //this.setState({ updated: this.props.update });\r\n        //}\r\n\r\n        const bmr = (10 * this.props.personal.weight) + (6.25 * this.props.personal.height) - (5 * this.props.personal.age) - 161;\r\n        const totalCalories = this.getActivityLevel() * bmr;\r\n        const carb = ((this.props.personal.carbPercent / 100.0 * totalCalories)/4).toFixed(2);\r\n        const protein = ((this.props.personal.proteinPercent / 100.0 * totalCalories)/4).toFixed(2);\r\n        const fat = ((this.props.personal.fatPercent / 100.0 * totalCalories)/9).toFixed(2);\r\n        const totalMacros = this.props.personal.carbPercent + this.props.personal.proteinPercent + this.props.personal.fatPercent;\r\n\r\n        return (\r\n            <Grid centered>\r\n                <Grid.Row divided color='pink' textAlign='center'>\r\n                    <Grid.Column color='pink' textAlign='center'>\r\n                        <div style={divLabelStyle4}>\r\n                            <a>Macros Calculation: </a>\r\n                            <a>{totalMacros} %</a>\r\n                        </div>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n                <Grid.Row columns={3} textAlign='center'>\r\n                    <Grid.Column color='black' textAlign='center'>\r\n                        <div><a>Carb(g)</a></div>\r\n                        <div style={divLabelStyle1}><a>{carb}</a></div>\r\n                    </Grid.Column>\r\n                    <Grid.Column color='black' textAlign='center'>\r\n                        <div><a>Protein(g)</a></div>\r\n                        <div style={divLabelStyle2}><a>{protein}</a></div>\r\n                    </Grid.Column>\r\n                    <Grid.Column color='black' textAlign='center'>\r\n                        <div><a>Fat(g)</a></div>\r\n                        <div style={divLabelStyle3}><a>{fat}</a></div>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            </Grid>);\r\n    }\r\n}\r\n\r\nexport default connect()(PersonalHeader);","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Button, Segment, Grid, Menu, Label, Input, Icon } from 'semantic-ui-react'\r\nimport { ApplicationState } from '../store';\r\nimport * as LoginStore from '../store/Login';\r\nimport SemanticDatepicker from 'react-semantic-ui-datepickers';\r\nimport 'react-semantic-ui-datepickers/dist/react-semantic-ui-datepickers.css';\r\nimport MeasurementsPersonalTable from './PersonalTable'\r\nimport PersonalHeader from './PersonalHeader'\r\n\r\ninterface IProps {\r\n}\r\n\r\ninterface IState {\r\n    username: string;\r\n    password: string;\r\n    activeItem: string;\r\n    selectedDate: Date;\r\n    macroGuides: IMacroGuides;\r\n    personal: IPersonal;\r\n    clients: IClient[];\r\n    macrosPlans: IMacrosPlan[];\r\n    updated: boolean;\r\n    apiUpdate: boolean;\r\n    savingStatus: string;\r\n}\r\n\r\ninterface IMacroGuides {\r\n    carb: number;\r\n    protein: number;\r\n    fat: number;\r\n    veg: number;\r\n    bodyFat: number;\r\n}\r\n\r\ninterface IPersonal {\r\n    name: string;\r\n    age: number;\r\n    height: number;\r\n    weight: number;\r\n    targetWeight: number,\r\n    activityLevel: number;\r\n    macroType: number;\r\n    carbPercent: number;\r\n    proteinPercent: number;\r\n    fatPercent: number;\r\n}\r\n\r\ninterface IClient {\r\n    id: number,\r\n    lastName: string;\r\n    firstName: string;\r\n    address: string;\r\n    city: string;\r\n    age: number;\r\n    created: string;\r\n}\r\n\r\ninterface IMacrosPlan {\r\n    id: number,\r\n    height: number,\r\n    weight: number,\r\n    targetWeight: number,\r\n    macroType: string;\r\n    activityLevel: string;\r\n    carbPercent: number,\r\n    proteinPercent: number,\r\n    fatPercent: number,\r\n    updated: string;\r\n    created: string;\r\n    clientId: number;\r\n}\r\n\r\n// At runtime, Redux will merge together...\r\ntype LoginProps =\r\n    IProps\r\n    & LoginStore.LoginState // ... state we've requested from the Redux store\r\n    & typeof LoginStore.actionCreators // ... plus action creators we've requested\r\n    & RouteComponentProps<{ username: string, password: string }>; // ... plus incoming routing parameters\r\n\r\nclass Personal extends React.Component<LoginProps, IState> {\r\n\r\n    public componentDidMount() {\r\n        this.props.getLogin();\r\n        this.setState({ selectedDate: new Date() });\r\n\r\n        if (this.props.logins.length > 0) {\r\n            console.log('--->' + this.props.logins[0].clientId);\r\n            fetch('api/client?clientId=' + this.props.logins[0].clientId)\r\n                .then(response => response.json() as Promise<IClient[]>)\r\n                .then(data => this.setState({\r\n                    clients: data, apiUpdate: true\r\n                })).catch(error => console.log(error));\r\n\r\n            fetch('api/client/' + this.props.logins[0].clientId + '/macrosplan')\r\n                .then(response => response.json() as Promise<IMacrosPlan[]>)\r\n                .then(data => this.setState({\r\n                    macrosPlans: data, apiUpdate: true\r\n                })).catch(error => console.log(error));\r\n        }\r\n    }\r\n\r\n    onSubmit = () => {\r\n        this.setState({ username: '', password: '' });\r\n    }\r\n\r\n    onCancel = () => {\r\n        this.setValuesFromDto();\r\n    }\r\n\r\n    getMacroType = (text: string) => {\r\n        if (text === 'Lose Weight') {\r\n            return 0;\r\n        }\r\n\r\n        if (text === 'Maintain/Muscle Gain') {\r\n            return 1;\r\n        }\r\n\r\n        if (text === 'Gain Weight') {\r\n            return 2;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    getMacroTypeText = (type: number) => {\r\n        if (type === 0) {\r\n            return 'Lose Weight';\r\n        }\r\n\r\n        if (type === 1) {\r\n            return 'Maintain/Muscle Gain';\r\n        }\r\n\r\n        if (type === 2) {\r\n            return 'Gain Weight';\r\n        }\r\n\r\n        return 'Lose Weight';\r\n    }\r\n\r\n    getActivityLevel = (text: string) => {\r\n        if (text === 'Sedentary') {\r\n            return 0;\r\n        }\r\n\r\n        if (text === 'Lightly Active') {\r\n            return 1;\r\n        }\r\n\r\n        if (text === 'Moderately Active') {\r\n            return 2;\r\n        }\r\n\r\n        if (text === 'Very Active') {\r\n            return 3;\r\n        }\r\n\r\n        if (text === 'Extra Active') {\r\n            return 4;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    getActivityLevelText = (type: number) => {\r\n        if (type === 0) {\r\n            return 'Sedentary';\r\n        }\r\n\r\n        if (type === 1) {\r\n            return 'Lightly Active';\r\n        }\r\n\r\n        if (type === 2) {\r\n            return 'Moderately Active';\r\n        }\r\n\r\n        if (type === 3) {\r\n            return 'Very Active';\r\n        }\r\n\r\n        if (type === 4) {\r\n            return 'Extra Active';\r\n        }\r\n\r\n        return 'Sedentary';\r\n    }\r\n\r\n    onSave = () => {\r\n        if ((this.state.personal.carbPercent + this.state.personal.proteinPercent + this.state.personal.fatPercent) < 100.00) {\r\n            this.setState({ savingStatus: 'Not Saved: Your Macro Portions is less than 100%' })\r\n            return;\r\n        }\r\n\r\n        this.setState({ savingStatus: 'Saving in progress' })\r\n\r\n        fetch('api/client', {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                id: this.props.logins[0].clientId,\r\n                lastName: '',\r\n                firstName: this.state.personal.name,\r\n                address: this.state.clients[0].address,\r\n                city: this.state.clients[0].city,\r\n                age: this.state.personal.age,\r\n                created: this.state.clients[0].created,\r\n            })\r\n        }).then(response => response.json()).then(data => this.setState({ savingStatus: 'Saved' })).catch(error => console.log('put macros ---------->' + error));\r\n\r\n       fetch('api/client/macrosplan', {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                id: 0,\r\n                height: parseFloat(this.state.personal.height.toString()),\r\n                weight: parseFloat(this.state.personal.weight.toString()),\r\n                targetWeight: parseFloat(this.state.personal.targetWeight.toString()),\r\n                macroType: this.getMacroTypeText(this.state.personal.macroType),\r\n                activityLevel: this.getActivityLevelText(this.state.personal.activityLevel),\r\n                carbPercent: this.state.personal.carbPercent,\r\n                proteinPercent: this.state.personal.proteinPercent,\r\n                fatPercent: this.state.personal.fatPercent,\r\n                updated: new Date(),\r\n                created: new Date(),\r\n                clientId: this.props.logins[0].clientId,\r\n            })\r\n        }).then(response => response.json()).then(data => this.setState({ savingStatus: 'Saved' })).catch(error => console.log('put macros ---------->' + error));\r\n    }\r\n\r\n    updateInput = (event: any) => {\r\n        this.setState({ username: event.target.value });\r\n    }\r\n\r\n    updateInput2 = (event: any) => {\r\n        this.setState({ password: event.target.value });\r\n    }\r\n\r\n    getComponent = () => {\r\n        if (this.state.activeItem == 'Macro') {\r\n            return (<MeasurementsPersonalTable type='Macro' personal={this.state.personal} updatePersonal={this.updatePersonal} update={this.state.updated} />);\r\n        }\r\n    }\r\n\r\n    updatePersonal = (input: IPersonal) => {\r\n        this.setState({\r\n            personal: {\r\n                name: input.name, age: input.age, height: input.height, weight: input.weight, targetWeight: input.targetWeight, activityLevel: input.activityLevel, macroType: input.macroType,\r\n                carbPercent: input.carbPercent, proteinPercent: input.proteinPercent, fatPercent: input.fatPercent\r\n            }\r\n        });\r\n        console.log(input.targetWeight);\r\n        this.setState({ updated: !this.state.updated, savingStatus:'Not Saved' });\r\n    }\r\n\r\n    constructor(props: LoginProps) {\r\n        super(props);\r\n        this.updatePersonal = this.updatePersonal.bind(this);\r\n        this.state = {\r\n            username: '', password: '',\r\n            activeItem: 'Macro',\r\n            selectedDate: new Date(),\r\n            macroGuides: { carb: 0, protein: 0, fat: 0, veg: 0, bodyFat: 0 },\r\n            personal: { name: '', age: 0, height: 0.0, weight: 0.0, targetWeight:0.0, activityLevel: 0, macroType: 0, carbPercent: 25.0, proteinPercent: 35.0, fatPercent: 20.0 },\r\n            clients: [],\r\n            macrosPlans: [],\r\n            updated: false,\r\n            apiUpdate: false,\r\n            savingStatus:'No Status'\r\n        };\r\n    }\r\n\r\n    handleItemClick = (e: any, { name }: any) => this.setState({ activeItem: name })\r\n\r\n    setValuesFromDto = () => {\r\n        if (this.state.clients.length > 0) {\r\n            const client = this.state.clients[0];\r\n            this.state.personal.name = client.firstName + ' ' + client.lastName;\r\n            this.state.personal.age = client.age;\r\n            this.setState({ personal: this.state.personal });\r\n            console.log(this.state.personal.name);\r\n            this.setState({ apiUpdate: false, updated: !this.state.updated });\r\n        }\r\n\r\n        if (this.state.macrosPlans.length > 0) {\r\n            const plan = this.state.macrosPlans[0];\r\n            this.state.personal.height = plan.height;\r\n            this.state.personal.weight = plan.weight;\r\n            this.state.personal.targetWeight = plan.targetWeight;\r\n            this.state.personal.carbPercent = plan.carbPercent;\r\n            this.state.personal.proteinPercent = plan.proteinPercent;\r\n            this.state.personal.fatPercent = plan.fatPercent;\r\n            this.state.personal.activityLevel = this.getActivityLevel(plan.activityLevel);\r\n            this.state.personal.macroType = this.getMacroType(plan.macroType);\r\n            this.setState({ personal: this.state.personal });\r\n            console.log(this.state.personal.name);\r\n            this.setState({ apiUpdate: false, updated: !this.state.updated });\r\n        }\r\n    }\r\n\r\n    getColour = () => {\r\n        if (this.state.savingStatus === 'Saved' || this.state.savingStatus === 'No Status') {\r\n            return 'green';\r\n        }\r\n\r\n        return 'red';\r\n    }\r\n\r\n    render() {\r\n        var divLabelStyle = {\r\n            color: '#fffafa',\r\n            backgroundColor: this.getColour()\r\n        };\r\n\r\n        const activeItem = this.state.activeItem;\r\n        if (this.props.logins.length > 0) {\r\n            if (this.state.apiUpdate === true) {\r\n                this.setValuesFromDto();\r\n            }\r\n        return (\r\n            <div>\r\n                <Grid centered>\r\n                    <Grid.Row>\r\n                        <Grid.Column verticalAlign='middle' floated='left' textAlign='left'>\r\n                            <Label size='large' as='a' color='pink' basic circular>Personal Tracker</Label>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                    <Grid.Row>\r\n                        <Grid.Column>\r\n                            <Segment textAlign='center'>\r\n                                <PersonalHeader guides={this.state.macroGuides} personal={this.state.personal} update={this.state.updated} />\r\n                            </Segment>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                    <Grid.Row>\r\n                        <Grid.Column width={16}>\r\n                            <Menu attached='top' tabular compact>\r\n                                <Menu.Item\r\n                                    name='Macro'\r\n                                    active={activeItem === 'Macro'}\r\n                                    onClick={this.handleItemClick}\r\n                                />\r\n                            </Menu>\r\n\r\n                            <Segment textAlign='center' attached='bottom'>\r\n                                {this.getComponent()}\r\n                            </Segment>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                    <Grid.Row>\r\n                        <Grid.Column verticalAlign='middle' width={16} textAlign='center' floated='left'>\r\n                            <div style={divLabelStyle}>\r\n                                <a>{this.state.savingStatus}</a>\r\n                            </div>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                    <Grid.Row columns={3}>\r\n                        <Grid.Column width={4} textAlign='left' floated='left'>\r\n                            <Button floated='left' size='tiny' onClick={this.onCancel} secondary>Reset</Button>\r\n                        </Grid.Column>\r\n                        <Grid.Column width={4} textAlign='left' floated='left'>\r\n                            <Button floated='left' size='tiny' onClick={this.onSave} primary>Save</Button>\r\n                        </Grid.Column>\r\n                        <Grid.Column width={8} textAlign='left' floated='left'>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                </Grid>\r\n            </div>);\r\n        }\r\n        return (<Redirect to=\"/\" />);\r\n    }\r\n\r\n    private getLoginCredentials = () => {\r\n        this.props.requestLogins(this.state.username, this.state.password);\r\n    }\r\n\r\n    private clearCredentials = () => {\r\n        this.props.requestLogout(this.state.username, this.state.password);\r\n    }\r\n}\r\n\r\n//export default connect()(Home);\r\nexport default connect(\r\n    (state: ApplicationState) => state.logins, // Selects which state properties are merged into the component's props\r\n    LoginStore.actionCreators // Selects which action creators are merged into the component's props\r\n)(Personal as any);","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Button, Form, Input, Grid, Segment, Menu } from 'semantic-ui-react'\r\nimport { ApplicationState } from '../store';\r\nimport * as LoginStore from '../store/Login';\r\nimport { RouteComponentProps } from 'react-router';\r\n\r\ninterface IProps {\r\n}\r\n\r\ninterface IState {\r\n    activeItem: string;\r\n    username: string;\r\n    password: string;\r\n}\r\n\r\n// At runtime, Redux will merge together...\r\ntype LoginProps =\r\n    IProps\r\n    & LoginStore.LoginState // ... state we've requested from the Redux store\r\n    & typeof LoginStore.actionCreators // ... plus action creators we've requested\r\n    & RouteComponentProps<{ username: string, password: string }>; // ... plus incoming routing parameters\r\n\r\nclass EBook extends React.Component<LoginProps, IState> {\r\n    public componentDidMount() {\r\n        this.props.getLogin();\r\n    }\r\n\r\n    constructor(props: LoginProps) {\r\n        super(props);\r\n        this.state = {\r\n            username: '', password: '', activeItem: 'BTPGuide',\r\n        };\r\n    }\r\n\r\n    handleItemClick = (e: any, { name }: any) => this.setState({ activeItem: name })\r\n\r\n    getPdf = () => {\r\n        var divPdf = {\r\n            width: '100%',\r\n            height: '700px'\r\n        };\r\n\r\n        if (this.state.activeItem === 'Workout') {\r\n            return (<iframe src=\"https://docs.google.com/gview?embedded=true&url=http://ingeineur-001-site1.ctempurl.com/HomeWorkoutGuideBTP3.1.pdf&amp;embedded=true\" style={divPdf}/>);\r\n        }\r\n\r\n        if (this.state.activeItem === 'BTPGuide') {\r\n            return (<iframe src=\"https://docs.google.com/gview?embedded=true&url=http://ingeineur-001-site1.ctempurl.com/BTP36WeekGuide.pdf&amp;embedded=true\" style={divPdf}/>);\r\n        }\r\n\r\n        return (<div>\r\n            <iframe className=\"embed-responsive-item\" src=\"https://docs.google.com/gview?embedded=true&url=http://ingeineur-001-site1.ctempurl.com/IdaFit2FitterSeptemberRecipepack.pdf&amp;embedded=true\" style={divPdf}/>\r\n        </div>)\r\n    }\r\n\r\n    render() {\r\n        var divPdf = {\r\n            width: '100%',\r\n            height: '700px'\r\n        };\r\n\r\n        if (this.props.logins.length > 0) {\r\n            return (\r\n                <div>\r\n                    <Menu attached='top' pointing secondary color='pink' compact>\r\n                        <Menu.Item\r\n                            name='BTPGuide'\r\n                            active={this.state.activeItem === 'BTPGuide'}\r\n                            onClick={this.handleItemClick}\r\n                        />\r\n                        <Menu.Item\r\n                            name='BTPRecipe'\r\n                            active={this.state.activeItem === 'BTPRecipe'}\r\n                            onClick={this.handleItemClick}\r\n                        />\r\n                        <Menu.Item\r\n                            name='Workout'\r\n                            active={this.state.activeItem === 'Workout'}\r\n                            onClick={this.handleItemClick}\r\n                        />\r\n                    </Menu>\r\n\r\n                    <div style={divPdf}>\r\n                        {this.getPdf()}\r\n                    </div>\r\n                </div>);\r\n        }\r\n        return (<Redirect to=\"/\" />);\r\n    }\r\n}\r\n\r\n//export default connect()(Home);\r\nexport default connect(\r\n    (state: ApplicationState) => state.logins, // Selects which state properties are merged into the component's props\r\n    LoginStore.actionCreators // Selects which action creators are merged into the component's props\r\n)(EBook as any);","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect, Link } from 'react-router-dom';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Button, Form, Input, Grid, Icon, Menu } from 'semantic-ui-react'\r\nimport { ApplicationState } from '../store';\r\nimport * as LoginStore from '../store/Login';\r\n\r\ninterface IProps {\r\n}\r\n\r\ninterface IState {\r\n    username: string;\r\n    password: string;\r\n    password1: string;\r\n    activeItem: string;\r\n    error: string;\r\n    login: string;\r\n}\r\n\r\n// At runtime, Redux will merge together...\r\ntype LoginProps =\r\n    IProps\r\n    & LoginStore.LoginState // ... state we've requested from the Redux store\r\n    & typeof LoginStore.actionCreators // ... plus action creators we've requested\r\n    & RouteComponentProps<{ username: string, password: string }>; // ... plus incoming routing parameters\r\n    \r\nclass Admin extends React.Component<LoginProps, IState > {\r\n    \r\n    onSubmit = () => {\r\n        console.log(\"test\");\r\n        this.setState({ username: '', password:'' });\r\n    }\r\n\r\n    updateInput = (event: any) => {\r\n        this.setState({ username: event.target.value });\r\n        console.log(event.target.value);\r\n    }\r\n\r\n    updateInput2 = (event: any) => {\r\n        this.setState({ password: event.target.value });\r\n        console.log(event.target.value);\r\n    }\r\n\r\n    updateInput3 = (event: any) => {\r\n        this.setState({ password1: event.target.value });\r\n        console.log(event.target.value);\r\n    }\r\n\r\n    constructor(props: LoginProps) {\r\n        super(props);\r\n        this.state = {\r\n            username: '', password: '', password1: '', activeItem: '', error: 'no status', login:''\r\n        };\r\n    }\r\n\r\n    handleItemClick = () => {\r\n        if (this.state.password1 === '' || this.state.password === '') {\r\n            this.setState({ error: 'Please Dont Leave Empty Fields' });\r\n            return;\r\n        }\r\n\r\n        if (this.state.password !== this.state.password1) {\r\n            this.setState({ error: \"Entered Passwords Don't Match\" });\r\n            return;\r\n        }\r\n\r\n        if (this.props.logins.length > 0) {\r\n            var login = this.props.logins[0];\r\n            console.log(JSON.stringify({\r\n                id: login.clientId,\r\n                username: login.username,\r\n                password: this.state.password1,\r\n                active: login.active,\r\n                lastLogin: new Date(),\r\n                clientId: this.props.logins[0].clientId,\r\n            }));\r\n            fetch('api/login', {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    id: login.id,\r\n                    username: login.username,\r\n                    password: this.state.password1,\r\n                    active: login.active,\r\n                    lastLogin: new Date(),\r\n                    clientId: this.props.logins[0].clientId,\r\n                })\r\n            }).then(response => response.json()).then(data => this.setState({ login: 'updated' })).catch(error => console.log('put macros ---------->' + error));\r\n        }\r\n    }\r\n\r\n    render() {\r\n        var divLabelStyle2 = {\r\n            color: 'pink',\r\n            fontStyle: 'italic'\r\n        };\r\n\r\n        if (this.props.logins.length > 0 && this.state.login !== 'updated') {\r\n            return (\r\n                <div>\r\n                    <div style={divLabelStyle2}>\r\n                        <h1>Update Password</h1>\r\n                    </div>\r\n\r\n                    <Form size=\"small\">\r\n                        <Form.Field>\r\n                            <label>Username </label>\r\n                            <Input type=\"username\" value={this.props.logins[0].username} placeholder='Username' />\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <label>New Password </label>\r\n                            <Input type=\"password\" value={this.state.password} placeholder='Password' onChange={this.updateInput2} />\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <label>Re-Type New Password </label>\r\n                            <Input type=\"password\" value={this.state.password1} placeholder='Password' onChange={this.updateInput3} />\r\n                        </Form.Field>\r\n                        <div>\r\n                            <Button type='submit' primary onClick={this.handleItemClick}>Update</Button>\r\n                            <a>{this.state.error}</a>\r\n                        </div>\r\n                    </Form>\r\n                </div>\r\n            );\r\n        }\r\n        return (<Redirect to=\"/\" />);\r\n    }\r\n}\r\n\r\n//export default connect()(Home);\r\nexport default connect(\r\n    (state: ApplicationState) => state.logins, // Selects which state properties are merged into the component's props\r\n    LoginStore.actionCreators // Selects which action creators are merged into the component's props\r\n)(Admin as any);\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Button, Segment, Grid, Menu, Label, List, Image, Dropdown, Modal, Icon } from 'semantic-ui-react'\r\nimport { ApplicationState } from '../store';\r\nimport * as LoginStore from '../store/Login';\r\nimport SemanticDatepicker from 'react-semantic-ui-datepickers';\r\nimport 'react-semantic-ui-datepickers/dist/react-semantic-ui-datepickers.css';\r\nimport MacroNew from './MacroNew'\r\nimport MacroHeader from './MacroHeader'\r\nimport MacroModal from './MacroModal'\r\n\r\ninterface IProps {\r\n}\r\n\r\ninterface IState {\r\n    username: string;\r\n    password: string;\r\n    activeItem: string;\r\n    selectedDate: Date;\r\n    prevDate: Date;\r\n    guides: IMacroGuides;\r\n    clients: IClient[];\r\n    clientDtos: IClientDto[];\r\n    macrosPlanDtos: IMacrosPlanDto[];\r\n    mealDtos: IMealDto[];\r\n    meals: IMeal[];\r\n    updated: boolean;\r\n    apiUpdate: boolean;\r\n    savingStatus: string;\r\n    dateChanged: boolean;\r\n    openReview: boolean;\r\n    clientId: number;\r\n    clientList: IOption[],\r\n    name: string\r\n}\r\n\r\ninterface IOption {\r\n    key: string,\r\n    text: string,\r\n    value: string\r\n}\r\n\r\ninterface IClient {\r\n    id: number\r\n    name: string;\r\n    age: number;\r\n    city: string;\r\n}\r\n\r\ninterface IMacroGuides {\r\n    carb: number;\r\n    protein: number;\r\n    fat: number;\r\n    fruits: number;\r\n}\r\n\r\ninterface IMeal {\r\n    carb: IMealDetails[];\r\n    protein: IMealDetails[];\r\n    fat: IMealDetails[];\r\n    fruits: IMealDetails[];\r\n    type: number;\r\n}\r\n\r\ninterface IMealDetails {\r\n    macro: number;\r\n    mealDesc: string;\r\n    check: boolean;\r\n}\r\n\r\ninterface IClientDto {\r\n    id: number,\r\n    lastName: string;\r\n    firstName: string;\r\n    address: string;\r\n    city: string;\r\n    age: number;\r\n    created: string;\r\n}\r\n\r\ninterface IMealDto {\r\n    id: number;\r\n    mealType: string;\r\n    macroType: string;\r\n    mealDesc: string;\r\n    macroValue: number;\r\n    updated: string;\r\n    created: string;\r\n    clientId: number;\r\n}\r\n\r\ninterface IMacrosPlanDto {\r\n    id: number,\r\n    height: number,\r\n    weight: number,\r\n    macroType: string;\r\n    activityLevel: string;\r\n    carbPercent: number,\r\n    proteinPercent: number,\r\n    fatPercent: number,\r\n    updated: string;\r\n    created: string;\r\n    clientId: number;\r\n}\r\n\r\n// At runtime, Redux will merge together...\r\ntype LoginProps =\r\n    IProps\r\n    & LoginStore.LoginState // ... state we've requested from the Redux store\r\n    & typeof LoginStore.actionCreators // ... plus action creators we've requested\r\n    & RouteComponentProps<{ username: string, password: string }>; // ... plus incoming routing parameters\r\n\r\nclass Master extends React.Component<LoginProps, IState> {\r\n\r\n    public componentDidMount() {\r\n        this.props.getLogin();\r\n        this.setState({ selectedDate: new Date(), prevDate: new Date() });\r\n\r\n        if (this.props.logins.length > 0) {\r\n            //get client info\r\n            fetch('api/client/all')\r\n                .then(response => response.json() as Promise<IClientDto[]>)\r\n                .then(data => this.setState({\r\n                    clientDtos: data, apiUpdate: true\r\n                })).catch(error => console.log(error));\r\n\r\n            //get macros plan\r\n            fetch('api/client/' + this.props.logins[0].clientId + '/macrosplan')\r\n                .then(response => response.json() as Promise<IMacrosPlanDto[]>)\r\n                .then(data => this.setState({\r\n                    macrosPlanDtos: data, apiUpdate: true\r\n                })).catch(error => console.log(error));\r\n\r\n            //get all meals\r\n            fetch('api/tracker/' + this.props.logins[0].clientId + '/meals?date=' + (new Date()).toISOString())\r\n                .then(response => response.json() as Promise<IMealDto[]>)\r\n                .then(data => this.setState({\r\n                    mealDtos: data, apiUpdate: true\r\n                })).catch(error => console.log(error));\r\n        }\r\n    }\r\n\r\n    onSubmit = () => {\r\n        this.setState({ username: '', password: '' });\r\n    }\r\n\r\n    updateInput = (event: any) => {\r\n        this.setState({ username: event.target.value });\r\n        console.log(event.target.value);\r\n    }\r\n\r\n    updateInput2 = (event: any) => {\r\n        this.setState({ password: event.target.value });\r\n        console.log(event.target.value);\r\n    }\r\n\r\n    updateParentCarb = (mealType: number, carb: IMealDetails[], protein: IMealDetails[], fat: IMealDetails[], veg: IMealDetails[]) => {\r\n        this.state.meals[mealType].carb = carb;\r\n        this.state.meals[mealType].protein = protein;\r\n        this.state.meals[mealType].fat = fat;\r\n        this.state.meals[mealType].fruits = veg;\r\n        this.setState({ updated: !this.state.updated });\r\n        this.setState({ savingStatus: 'Not Saved' })\r\n    }\r\n\r\n    constructor(props: LoginProps) {\r\n        super(props);\r\n        this.updateParentCarb = this.updateParentCarb.bind(this);\r\n        this.state = {\r\n            clients: [], username: '', password: '', activeItem: 'Breakfast',\r\n            selectedDate: new Date(),\r\n            prevDate: new Date(),\r\n            guides: { carb: 0, protein: 0, fat: 0, fruits: 0 },\r\n            meals: [{ carb: [], protein: [], fat: [], fruits: [], type: 1 },\r\n                { carb: [], protein: [], fat: [], fruits: [], type: 2 },\r\n                { carb: [], protein: [], fat: [], fruits: [], type: 3 },\r\n                { carb: [], protein: [], fat: [], fruits: [], type: 4 }],\r\n            updated: false,\r\n            clientDtos: [],\r\n            macrosPlanDtos: [],\r\n            mealDtos: [],\r\n            apiUpdate: false,\r\n            savingStatus: 'Saved',\r\n            dateChanged: false,\r\n            openReview: false,\r\n            clientId: 2,\r\n            clientList: [],\r\n            name:''\r\n        };\r\n    }\r\n\r\n    handleItemClick = (e: any, { name }: any) => this.setState({ activeItem: name })\r\n\r\n    mealTypeDict = { 'Breakfast': 0, 'Lunch': 1, 'Dinner': 2, 'Snack': 3 };\r\n\r\n    getMealType = (type:string) =>\r\n    {\r\n        if (type == 'Lunch') {\r\n            return 1;\r\n        }\r\n        if (type == 'Dinner') {\r\n            return 2;\r\n        }\r\n        if (type == 'Snack') {\r\n            return 3;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    getActivityLevel = (activityLevel: string) => {\r\n        if (activityLevel == 'Sedentary') {\r\n            return 1.2;\r\n        }\r\n\r\n        if (activityLevel == 'Lightly Active') {\r\n            return 1.375;\r\n        }\r\n\r\n        if (activityLevel == 'Moderately Active') {\r\n            return 1.55;\r\n        }\r\n\r\n        if (activityLevel == 'Very Active') {\r\n            return 1.725;\r\n        }\r\n\r\n        if (activityLevel == 'Extra Active') {\r\n            return 1.9;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    setValuesFromDto = () => {\r\n        if (this.state.clients.length === this.state.clientDtos.length) {\r\n            return;\r\n        }\r\n\r\n        this.state.clientDtos.forEach(client => {\r\n            this.state.clients.push({ id: client.id, name: client.firstName, age: client.age, city: client.city });\r\n        });\r\n        \r\n        //if (this.state.macrosPlans.length > 0) {\r\n        //    const plan = this.state.macrosPlans[0];\r\n        //    this.state.personal.height = plan.height;\r\n        //    this.state.personal.weight = plan.weight;\r\n        //    this.state.personal.targetWeight = plan.targetWeight;\r\n        //    this.state.personal.carbPercent = plan.carbPercent;\r\n        //    this.state.personal.proteinPercent = plan.proteinPercent;\r\n        //    this.state.personal.fatPercent = plan.fatPercent;\r\n        //    this.state.personal.activityLevel = this.getActivityLevel(plan.activityLevel);\r\n        //    this.state.personal.macroType = this.getMacroType(plan.macroType);\r\n        //    this.setState({ personal: this.state.personal });\r\n        //    console.log(this.state.personal.name);\r\n        //    this.setState({ apiUpdate: false, updated: !this.state.updated });\r\n        //}\r\n    }\r\n\r\n    setMacroGuides = () => {\r\n        if (this.state.macrosPlanDtos.length > 0 && this.state.clientDtos.length > 0) {\r\n            const client = this.state.clientDtos[0];\r\n            const macrosPlan = this.state.macrosPlanDtos[0];\r\n            const bmr = (10 * macrosPlan.weight) + (6.25 * macrosPlan.height) - (5 * client.age) - 161;\r\n            const totalCalories = this.getActivityLevel(macrosPlan.activityLevel) * bmr;\r\n            const carb = ((macrosPlan.carbPercent / 100.0 * totalCalories) / 4).toFixed(2);\r\n            const protein = ((macrosPlan.proteinPercent / 100.0 * totalCalories) / 4).toFixed(2);\r\n            const fat = ((macrosPlan.fatPercent / 100.0 * totalCalories) / 9).toFixed(2);\r\n\r\n            this.state.guides.carb = parseFloat(carb);\r\n            this.state.guides.protein = parseFloat(protein);\r\n            this.state.guides.fat = parseFloat(fat);\r\n            this.state.guides.fruits = 4;\r\n            this.setState({ guides: this.state.guides });\r\n        }\r\n    }\r\n\r\n    setMeals = () => {\r\n        if (this.state.mealDtos.length > 0) {\r\n\r\n            var totalMeals = 0;\r\n            this.state.meals.map((item) => {\r\n                totalMeals += item.carb.length;\r\n                totalMeals += item.protein.length;\r\n                totalMeals += item.fat.length;\r\n                totalMeals += item.fruits.length;\r\n            });\r\n\r\n            if (totalMeals === this.state.mealDtos.length) {\r\n                return;\r\n            }\r\n\r\n            this.state.mealDtos.forEach(meal => {\r\n                if (meal.macroType === 'carb') {\r\n                    console.log(meal);\r\n                    this.state.meals[this.getMealType(meal.mealType)].carb.push({ mealDesc: meal.mealDesc, macro: meal.macroValue, check: false });\r\n                }\r\n                else if (meal.macroType === 'protein') {\r\n                    this.state.meals[this.getMealType(meal.mealType)].protein.push({ mealDesc: meal.mealDesc, macro: meal.macroValue, check: false });\r\n                }\r\n                else if (meal.macroType === 'fat') {\r\n                    this.state.meals[this.getMealType(meal.mealType)].fat.push({ mealDesc: meal.mealDesc, macro: meal.macroValue, check: false });\r\n                }\r\n                else if (meal.macroType === 'fruits') {\r\n                    this.state.meals[this.getMealType(meal.mealType)].fruits.push({ mealDesc: meal.mealDesc, macro: meal.macroValue, check: false });\r\n                }\r\n            })\r\n\r\n            this.setState({ meals: this.state.meals });\r\n        }\r\n    }\r\n\r\n    getMeals = () => {\r\n        fetch('api/tracker/' + this.state.clientId + '/meals?date=' + this.state.selectedDate.toISOString())\r\n            .then(response => response.json() as Promise<IMealDto[]>)\r\n            .then(data => this.setState({\r\n                mealDtos: data, apiUpdate: true\r\n            })).catch(error => console.log(error));\r\n\r\n        fetch('api/client/' + this.state.clientId + '/macrosplan')\r\n            .then(response => response.json() as Promise<IMacrosPlanDto[]>)\r\n            .then(data => this.setState({\r\n                macrosPlanDtos: data, apiUpdate: true\r\n            })).catch(error => console.log(error));\r\n    }\r\n\r\n    resetMeals = () => {\r\n        this.setState({\r\n            meals: [{ carb: [], protein: [], fat: [], fruits: [], type: 1 },\r\n            { carb: [], protein: [], fat: [], fruits: [], type: 2 },\r\n            { carb: [], protein: [], fat: [], fruits: [], type: 3 },\r\n            { carb: [], protein: [], fat: [], fruits: [], type: 4 }] });\r\n    }\r\n\r\n    handleDateChange = (event: any, field: any) => {\r\n        var newDate = new Date(field['value']);\r\n        newDate.setHours(0, 0, 0, 0);\r\n        console.log(newDate);\r\n        var dayDiff = Math.abs((this.state.prevDate.getTime() - newDate.getTime()) / (1000 * 3600 * 24));\r\n        if (dayDiff < 356) {\r\n            this.setState({ prevDate: this.state.selectedDate });\r\n            this.setState({ selectedDate: newDate, mealDtos: [], dateChanged: true, apiUpdate: true })\r\n        }\r\n    }\r\n\r\n    handleOpen = (open: boolean) => {\r\n        this.setState({ openReview: open });\r\n    }\r\n\r\n    getColour = () => {\r\n        if (this.state.savingStatus === 'Not Saved') {\r\n            return 'red';\r\n        }\r\n\r\n        return 'green';\r\n    }\r\n\r\n    handleMealsClick = (field: any, value: any) => {\r\n        //console.log(value['checked']);\r\n        //this.state.meals[parseInt(value['className'])]['check'] = value['value'];\r\n        //this.setState({ meals: this.state.meals, updated: true });\r\n        var clientId = parseInt(value['className']);\r\n        this.setState({ clientId: clientId });\r\n    }\r\n\r\n    getRows = () => {\r\n        return (\r\n            this.state.clients.map((item, index) =>\r\n                <List.Item key={index}>\r\n                    <Image key={index} avatar src='https://react.semantic-ui.com/images/avatar/small/rachel.png' />\r\n                    <List.Content key={index+1}>\r\n                        <List.Header key={index} as='a'>{item.name}</List.Header>\r\n                        <List.Description key={index + 1}>\r\n                            Age: {item.age} City: {item.city}\r\n                            <Button className={item.id.toString()} key={index + 2} size=\"small\" basic>Meals</Button>\r\n                            <Button className={item.id.toString()} key={index + 3} size=\"small\" basic>Activities</Button>\r\n                    </List.Description>\r\n                    </List.Content>\r\n                </List.Item>\r\n            ));\r\n    }\r\n\r\n    setClient = (event: any, data: any) => {\r\n        console.log(data);\r\n        this.setState({ updated: true, clientId: data['value'] });\r\n        this.setState({ dateChanged: true })\r\n    }\r\n\r\n    render() {\r\n        var divLabelStyle = {\r\n            color: '#fffafa',\r\n            backgroundColor: this.getColour()\r\n        };\r\n\r\n        const activeItem = this.state.activeItem;\r\n        console.log(this.state.meals);\r\n        if (this.props.logins.length > 0) {\r\n            if (this.state.dateChanged === true) {\r\n                this.setState({ dateChanged: false });\r\n                this.resetMeals();\r\n                this.getMeals();\r\n\r\n                if (this.state.clientId != 0) {\r\n                    if (this.state.clientList.find(x => x.key === this.state.clientId.toString())) {\r\n                        const cname = this.state.clientList[this.state.clientList.findIndex(x => x.key === this.state.clientId.toString())].text;\r\n                        this.setState({ name: cname });\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this.state.apiUpdate === true) {\r\n                this.setState({ apiUpdate: false, updated: !this.state.updated });\r\n                this.setValuesFromDto();\r\n                if (this.state.clientList.length < 1) {\r\n                    this.state.clientDtos.forEach(client => {\r\n                        this.state.clientList.push({ key: client.id.toString(), text: client.firstName, value: client.id.toString() });\r\n                    });\r\n                }\r\n                this.setMacroGuides();\r\n                this.setMeals();\r\n            }\r\n            return (\r\n                <div>\r\n                    <Grid centered>\r\n                        <Grid.Row columns={2}>\r\n                            <Grid.Column verticalAlign='middle' floated='left' textAlign='left'>\r\n                                <Label size='large' as='a' color='pink' tag>Master View</Label>\r\n                            </Grid.Column>\r\n                            <Grid.Column verticalAlign='middle' floated='right' textAlign='right'>\r\n                                <SemanticDatepicker value={this.state.selectedDate} date={new Date()} onChange={this.handleDateChange} showToday />\r\n                            </Grid.Column>\r\n                        </Grid.Row>\r\n                        <Grid.Row textAlign='left' columns={2}>\r\n                            <Grid.Column floated='left'>\r\n                                <Dropdown id='activities' value={this.state.clientId} selection options={this.state.clientList} onChange={this.setClient} />\r\n                            </Grid.Column>\r\n                            <Grid.Column floated='left'>\r\n                                <Modal\r\n                                    open={this.state.openReview}\r\n                                    onClose={() => this.handleOpen(false)}\r\n                                    onOpen={() => this.handleOpen(true)}\r\n                                    trigger={<Button size='tiny' primary>Review</Button>}>\r\n                                    <Modal.Header> {this.state.name}: {this.state.selectedDate.toLocaleDateString()}</Modal.Header>\r\n                                    <Modal.Content scrolling>\r\n                                        <Modal.Description>\r\n                                            <MacroModal guides={this.state.guides} meals={this.state.meals} update={this.state.updated} />\r\n                                        </Modal.Description>\r\n                                    </Modal.Content>\r\n                                    <Modal.Actions>\r\n                                        <Button size='tiny' onClick={() => this.handleOpen(false)} primary>\r\n                                            Close <Icon name='chevron right' />\r\n                                        </Button>\r\n                                    </Modal.Actions>\r\n                                </Modal>\r\n                            </Grid.Column>\r\n                        </Grid.Row>\r\n                    </Grid>\r\n                </div>);\r\n        }\r\n        return (<Redirect to=\"/\" />);\r\n    }\r\n}\r\n\r\n//export default connect()(Home);\r\nexport default connect(\r\n    (state: ApplicationState) => state.logins, // Selects which state properties are merged into the component's props\r\n    LoginStore.actionCreators // Selects which action creators are merged into the component's props\r\n)(Master as any);","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const url = process.env.PUBLIC_URL as string;\r\n        const publicUrl = new URL(url, window.location.toString());\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Lets check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl);\r\n            } else {\r\n                // Is not local host. Just register service worker\r\n                registerValidSW(swUrl);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing as ServiceWorker;\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the old content will have been purged and\r\n                            // the fresh content will have been added to the cache.\r\n                            // It's the perfect time to display a \"New content is\r\n                            // available; please refresh.\" message in your web app.\r\n                            console.log('New content is available; please refresh.');\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (response.status === 404 || (contentType && contentType.indexOf('javascript') === -1)) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log('No internet connection found. App is running in offline mode.');\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.css';\r\n\r\nimport * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { ConnectedRouter } from 'connected-react-router';\r\nimport { createBrowserHistory } from 'history';\r\nimport configureStore from './store/configureStore';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport 'react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css';\r\n\r\n// Create browser history to use in the Redux store\r\nconst baseUrl = document.getElementsByTagName('base')[0].getAttribute('href') as string;\r\nconst history = createBrowserHistory({ basename: baseUrl });\r\n\r\n// Get the application-wide store instance, prepopulating with state from the server where available.\r\nconst store = configureStore(history);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <ConnectedRouter history={history}>\r\n            <App />\r\n        </ConnectedRouter>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\nregisterServiceWorker();\r\n","import { applyMiddleware, combineReducers, compose, createStore } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\r\nimport { History } from 'history';\r\nimport { ApplicationState, reducers } from './';\r\n\r\nexport default function configureStore(history: History, initialState?: ApplicationState) {\r\n    const middleware = [\r\n        thunk,\r\n        routerMiddleware(history)\r\n    ];\r\n\r\n    const rootReducer = combineReducers({\r\n        ...reducers,\r\n        router: connectRouter(history)\r\n    });\r\n\r\n    const enhancers = [];\r\n    const windowIfDefined = typeof window === 'undefined' ? null : window as any;\r\n    if (windowIfDefined && windowIfDefined.__REDUX_DEVTOOLS_EXTENSION__) {\r\n        enhancers.push(windowIfDefined.__REDUX_DEVTOOLS_EXTENSION__());\r\n    }\r\n\r\n    return createStore(\r\n        rootReducer,\r\n        initialState,\r\n        compose(applyMiddleware(...middleware), ...enhancers)\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport { Route } from 'react-router';\r\nimport Layout from './components/Layout';\r\nimport Home from './components/Home';\r\nimport Counter from './components/Counter';\r\nimport FetchData from './components/FetchData';\r\nimport Dashboard from './components/Dashboard';\r\nimport Activities from './components/Activities';\r\nimport Meals from './components/Meals';\r\nimport Macro from './components/Macro';\r\nimport MacroHeader from './components/MacroHeader';\r\nimport ActivivtyHeader from './components/ActivityHeader';\r\nimport ActivivtyTable from './components/ActivityTable';\r\nimport Measurements from './components/Measurements';\r\nimport Personal from './components/Personal';\r\nimport EBook from './components/EBook';\r\nimport Admin from './components/Admin';\r\nimport Master from './components/Master';\r\n\r\nimport './custom.css'\r\n\r\nexport default () => (\r\n    <Layout>\r\n        <Route exact path='/' component={Home} />\r\n        <Route path='/counter' component={Counter} />\r\n        <Route path='/dashboard' component={Dashboard} />\r\n        <Route path='/activities' component={Activities} />\r\n        <Route path='/meals' component={Meals} />\r\n        <Route path='/macro' component={Macro} />\r\n        <Route path='/macroheader' component={MacroHeader} />\r\n        <Route path='/activityheader' component={ActivivtyHeader} />\r\n        <Route path='/activitytable' component={ActivivtyTable} />\r\n        <Route path='/measurements' component={Measurements} />\r\n        <Route path='/personal' component={Personal} />\r\n        <Route path='/ebook' component={EBook} />\r\n        <Route path='/admin' component={Admin} />\r\n        <Route path='/master' component={Master} />\r\n        <Route path='/fetch-data/:startDateIndex?' component={FetchData} />\r\n    </Layout>\r\n);\r\n"],"sourceRoot":""}